/*
 * JastAddJ is covered by the modified BSD License. You should have received a copy of the
 * modified BSD license with this compiler.
 * 
 * Copyright (c) 2011, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 */

/**
 * Improved error reporting and extended parsing of literals for Java 7.
 * Adds support for binary literals and underscores in numeric literals.
 *
 * Range errors for literals can not be detected until we try to compute
 * the value of a literal. Other syntax errors for literals can be found
 * during scanning/parsing.
 */
aspect Literals {

	/**
	 * @return true if this floating point literal is equivalent to a zero literal
	 */
	syn lazy boolean FloatingPointLiteral.isZero() {
		for(int i = 0; i < digits.length(); i++) {
			char c = digits.charAt(i);
			if (c == 'e' || c == 'p') break;
			if (c != '0' && c != '.') {
				return false;
			}
		}
		return true;
	}

	/**
	 * @return true if this floating point literal is equivalent to a zero literal
	 */
	syn lazy boolean DoubleLiteral.isZero() {
		for(int i = 0; i < digits.length(); i++) {
			char c = digits.charAt(i);
			if (c == 'e' || c == 'p') break;
			if (c != '0' && c != '.') {
				return false;
			}
		}
		return true;
	}

	/**
	 * @return a fresh double literal representing the given value
	 */
	refine BytecodeCONSTANT public static Literal
	Literal.buildDoubleLiteral(double value) {
		String digits = Double.toString(value);
		NumericLiteral lit = new DoubleLiteral(digits);
		lit.setDigits(digits);
		lit.setKind(NumericLiteral.DECIMAL);
		return lit;
	}

	/**
	 * @return a fresh float literal representing the given value
	 */
	refine BytecodeCONSTANT public static Literal
	Literal.buildFloatLiteral(float value) {
		String digits = Float.toString(value);
		NumericLiteral lit = new FloatingPointLiteral(digits);
		lit.setDigits(digits);
		lit.setKind(NumericLiteral.DECIMAL);
		return lit;
	}

	/**
	 * @return a fresh integer literal representing the given value
	 */
	refine BytecodeCONSTANT public static Literal
	Literal.buildIntegerLiteral(int value) {
		String digits = Integer.toHexString(value);
		NumericLiteral lit = new IntegerLiteral("0x"+digits);
		lit.setDigits(digits.toLowerCase());
		lit.setKind(NumericLiteral.HEXADECIMAL);
		return lit;
	}

	/**
	 * @return a fresh long literal representing the given value
	 */
	refine BytecodeCONSTANT public static Literal
	Literal.buildLongLiteral(long value) {
		String digits = Long.toHexString(value);
		NumericLiteral lit = new LongLiteral("0x"+digits);
		lit.setDigits(digits.toLowerCase());
		lit.setKind(NumericLiteral.HEXADECIMAL);
		return lit;
	}

	/**
	 * Defer pretty printing to superclass.
	 */
	refine PrettyPrint public void LongLiteral.toString(StringBuffer s) {
		super.toString(s);
	}

	/**
	 * Defer pretty printing to superclass.
	 */
	refine PrettyPrint public void FloatingPointLiteral.toString(StringBuffer s) {
		super.toString(s);
	}

	/**
	 * Defer pretty printing to superclass.
	 */
	refine PrettyPrint public void DoubleLiteral.toString(StringBuffer s) {
		super.toString(s);
	}

	/**
	 * Check for and report literal-out-of-bounds error.
	 * If the constant is error-marked, there exists a literal out of bounds error.
	 */
	refine TypeCheck public void IntegerLiteral.typeCheck() {
		if (constant().error)
			error("The integer literal \""+getLITERAL()+"\" is too large for type int.");

	}

	/**
	 * Check for and report literal-out-of-bounds error.
	 * If the constant is error-marked, there exists a literal out of bounds error.
	 */
	refine TypeCheck public void LongLiteral.typeCheck() {
		if(constant().error)
			error("The integer literal \""+getLITERAL()+"\" is too large for type long.");
	}

	/**
	 * Parse this literal and return a fresh Constant.
	 * @return a fresh Constant representing this IntegerLiteral
	 */
	eq IntegerLiteral.constant() {
		long l = 0;
		try {
			l = parseLong();
		} catch (NumberFormatException e) {
			Constant c = Constant.create(0L);
			c.error = true;
			return c;
		}
		Constant c = Constant.create((int)l);
		if (l != (0xFFFFFFFFL & ((int) l)) &&
				l != ((long) ((int) l)) ) {
			c.error = true;
			//System.err.println("Can not cast to integer: "+l+" ("+((int)l)+")");
		}
		return c;
	}

	/**
	 * Parse this literal and return a fresh Constant.
	 * @return a fresh Constant representing this LongLiteral
	 */
	eq LongLiteral.constant() {
		try {
			return Constant.create(parseLong());
		} catch (NumberFormatException e) {
			Constant c = Constant.create(0L);
			c.error = true;
			return c;
		}
	}

	/**
	 * Parse this literal and return a fresh Constant.
	 * @return a fresh Constant representing this FloatingPointLiteral
	 */
	eq FloatingPointLiteral.constant() {
		try {
			return Constant.create(Float.parseFloat(getDigits()));
		}
		catch (NumberFormatException e) {
			Constant c = Constant.create(0.0f);
			c.error = true;
			return c;
		}
	}

	/**
	 * Parse this literal and return a fresh Constant.
	 * @return a fresh Constant representing this DoubleLiteral
	 */
	eq DoubleLiteral.constant() {
		try {
			return Constant.create(Double.parseDouble(getDigits()));
		}
		catch (NumberFormatException e) {
			Constant c = Constant.create(0.0d);
			c.error = true;
			return c;
		}
	}

	/**
	 * This is a refactored version of Literal.parseLong which supports
	 * binary literals. This version of parseLong is implemented as an
	 * attribute rather than a static method. Perhaps some slight
	 * performance boost could be gained from keeping it static, but with
	 * the loss of declarative- and ReRAGness.
	 *
	 * There exists only a parseLong, and not a parseInteger. Parsing
	 * of regular integer literals works the same, but with stricter
	 * bounds requirements on the resulting parsed value.
	 */
	syn long NumericLiteral.parseLong() {
		switch (getKind()) {
			case HEXADECIMAL:
				return parseLongHexadecimal();
			case OCTAL:
				return parseLongOctal();
			case BINARY:
				return parseLongBinary();
			case DECIMAL:
			default:
				return parseLongDecimal();
		}
	}

	/**
	 * Parse a hexadecimal long literal.
	 *
	 * @throws NumberFormatException if the literal is too large.
	 */
	syn long NumericLiteral.parseLongHexadecimal() {
		long val = 0;
		if (digits.length() > 16) {
			for (int i = 0; i < digits.length()-16; i++)
				if (digits.charAt(i) != '0')
					throw new NumberFormatException("");
		}
		for (int i = 0; i < digits.length(); i++) {
			int c = digits.charAt(i);
			if (c >= 'a' && c <= 'f')
				c = c - 'a' + 10;
			else
				c = c - '0';
			val = val * 16 + c;
		}
		return val;
	}

	/**
	 * Parse an octal long literal.
	 *
	 * @throws NumberFormatException if the literal is too large.
	 */
	syn long NumericLiteral.parseLongOctal() {
		long val = 0;
		if (digits.length() > 21) {
			for (int i = 0; i < digits.length() - 21; i++)
				if (i == digits.length() - 21 - 1) {
					if(digits.charAt(i) != '0' && digits.charAt(i) != '1')
						throw new NumberFormatException("");
				} else {
					if(digits.charAt(i) != '0')
						throw new NumberFormatException("");
				}
		}
		for (int i = 0; i < digits.length(); i++) {
			int c = digits.charAt(i) - '0';
			val = val * 8 + c;
		}
		return val;
	}

	/**
	 * Parse a binary long literal.
	 *
	 * @throws NumberFormatException if the literal is too large.
	 */
	syn long NumericLiteral.parseLongBinary() {
		long val = 0;
		if (digits.length() > 64) {
			for (int i = 0; i < digits.length()-64; i++)
				if (digits.charAt(i) != '0')
					throw new NumberFormatException("");
		}
		for (int i = 0; i < digits.length(); ++i) {
			if (digits.charAt(i) == '1')
				val |= 1L << (digits.length()-i-1);
		}
		return val;
	}

	/**
	 * Parse an octal long literal.
	 * @throws NumberFormatException if the literal is too large.
	 */
	syn long NumericLiteral.parseLongDecimal() {
		long val = 0;
		long prev = 0;
		for (int i = 0; i < digits.length(); i++) {
			prev = val;
			int c = digits.charAt(i);
			if(c >= '0' && c <= '9')
				c = c - '0';
			else
				throw new NumberFormatException("");
			val = val * 10 + c;
			if (val < prev) {
				boolean negMinValue = i == (digits.length()-1) &&
					isNegative() && val == Long.MIN_VALUE;
				if (!negMinValue)
					throw new NumberFormatException("");
			}
		}
		if (val == Long.MIN_VALUE)
			return val;
		if (val < 0)
			throw new NumberFormatException("");
		return isNegative() ? -val : val;
	}

	public static final int NumericLiteral.DECIMAL = 0;
	public static final int NumericLiteral.HEXADECIMAL = 1;
	public static final int NumericLiteral.OCTAL = 2;
	public static final int NumericLiteral.BINARY = 3;

	/**
	 * Utility attribute for literal rewriting.
	 * Any of the NumericLiteral subclasses have already
	 * been rewritten and/or parsed, and should not be
	 * rewritten again.
	 *
	 * @return true if this literal is a "raw", not-yet-parsed NumericLiteral
	 */
	syn boolean NumericLiteral.needsRewrite() = true;
	eq IntegerLiteral.needsRewrite() = false;
	eq LongLiteral.needsRewrite() = false;
	eq FloatingPointLiteral.needsRewrite() = false;
	eq DoubleLiteral.needsRewrite() = false;

	rewrite MinusExpr {
		when(getOperand() instanceof IntegerLiteral && ((IntegerLiteral)getOperand()).isDecimal() && getOperand().isPositive())
		to IntegerLiteral {
			IntegerLiteral original = (IntegerLiteral) getOperand();
			IntegerLiteral literal = new IntegerLiteral("-"+
					original.getLITERAL());
			literal.setDigits(original.getDigits());
			literal.setKind(original.getKind());
			return literal;
		}
	}

	rewrite MinusExpr {
		when(getOperand() instanceof LongLiteral && ((LongLiteral)getOperand()).isDecimal() && getOperand().isPositive())
		to LongLiteral {
			LongLiteral original = (LongLiteral) getOperand();
			LongLiteral literal = new LongLiteral("-"+
					original.getLITERAL());
			literal.setDigits(original.getDigits());
			literal.setKind(original.getKind());
			return literal;
		}
	}

	rewrite NumericLiteral {
		when (needsRewrite())
		to Literal {
			return parse();
		}
	}

	syn boolean NumericLiteral.isNegative() = getLITERAL().charAt(0) == '-';

	/**
	 * Get the trimmed digits of this literal, excluding
	 * without underscore, prefix and suffix.
	 */
	syn String NumericLiteral.getDigits() = digits;

	/**
	 * The trimmed digits.
	 */
	protected String NumericLiteral.digits = "";

	/**
	 * Sets the trimmed digits of this literal.
	 */
	public void NumericLiteral.setDigits(String digits) {
		this.digits = digits;
	}

	/**
	 * The literal kind tells which kind of literal it is;
	 * it's either a DECIMAL, HEXADECIMAL, OCTAL or BINARY literal.
	 */
	syn int NumericLiteral.getKind() = kind;

	/**
	 * The literal kind tells which kind of literal it is;
	 * it's either a DECIMAL, HEXADECIMAL, OCTAL or BINARY literal.
	 */
	protected int NumericLiteral.kind = NumericLiteral.DECIMAL;

	/**
	 * Sets the literal kind.
	 */
	public void NumericLiteral.setKind(int kind) {
		this.kind = kind;
	}

	/**
	 * Get the radix of this literal.
	 * @return 16 (hex), 10 (decimal), 8 (octal) or 2 (binary)
	 */
	syn int NumericLiteral.getRadix() {
		switch (kind) {
			case HEXADECIMAL:
				return 16;
			case OCTAL:
				return 8;
			case BINARY:
				return 2;
			case DECIMAL:
			default:
				return 10;
		}
	}

	/**
	 * @return true if the literal is a decimal literal
	 */
	syn boolean NumericLiteral.isDecimal() = kind == DECIMAL;

	/**
	 * @return true if the literal is a hexadecimal literal
	 */
	syn boolean NumericLiteral.isHex() = kind == HEXADECIMAL;

	/**
	 * @return true if the literal is an octal literal
	 */
	syn boolean NumericLiteral.isOctal() = kind == OCTAL;

	/**
	 * @return true if the literal is a binary literal
	 */
	syn boolean NumericLiteral.isBinary() = kind == BINARY;

	/**
	 * Fetches the immediately enclosing compilation unit.
	 */
	inh CompilationUnit ASTNode.compilationUnit();

	/**
	 * The type of an IllegalLiteral does not matter,
	 * as it is only a placeholder literal for error messages.
	 */
	eq IllegalLiteral.type() = unknownType();

	/**
	 * The type of a NumericLiteral is undefined.
	 * The literal must be parsed before it can have a type.
	 */
	eq NumericLiteral.type() = unknownType();

	/**
	 * Error processing for literals.
	 * Include the token range from parsing.
	 */
	public void IllegalLiteral.collectErrors() {
		int line = getLine(LITERALstart);
		int column = getColumn(LITERALstart);
		int endLine = getLine(LITERALend);
		int endColumn = getColumn(LITERALend);
		compilationUnit().errors.add(new Problem(sourceFile(),
					getLITERAL(), line, column, endLine, endColumn,
					Problem.Severity.ERROR, Problem.Kind.LEXICAL));
	}

	/**
	 * The NumericLiteral class is used to parse the "value characters"
	 * from a numeric literal. Value characters are those that have a
	 * value in the literal, and are not fillers such as underscore.
	 *
	 * NumericLiteral's parseLiteral function also does error checking
	 * on numeric literals and returns an IllegalLiteral if any syntax
	 * error is detected in the literal.
	 */
	public class NumericLiteral {
		private StringBuffer buf = new StringBuffer();
		private int idx = 0;
		private boolean whole;// have whole part?
		private boolean fraction;// have fraction part?
		private boolean exponent;// have exponent part?
		private boolean floating;// is floating point?
		private boolean isFloat;
		private boolean isLong;

		/**
 		 * @return a readable name to describe this literal.
 		 */
		private String name() {
			String name;
			switch (kind) {
				case DECIMAL:
					name = "decimal";
					break;
				case HEXADECIMAL:
					name = "hexadecimal";
					break;
				case OCTAL:
					name = "octal";
					break;
				case BINARY:
				default:
					name = "binary";
					break;
			}
			if (floating)
				return name+" floating point";
			else
				return name;
		}

		/**
		 * The next character in the literal is a significant character;
		 * push it onto the buffer.
		 */
		private void pushChar() {
			buf.append(getLITERAL().charAt(idx++));
		}

		/**
		 * Skip ahead n chracters in the literal.
		 */
		private void skip(int n) {
			idx += n;
		}

		/**
		 * @return true if there exists at least n more characters
		 * in the literal
		 */
		private boolean have(int n) {
			return getLITERAL().length() >= idx+n;
		}

		/**
		 * Look at the n'th next character.
		 */
		private char peek(int n) {
			return getLITERAL().charAt(idx+n);
		}

		/**
		 * @return true if the character c is a decimal digit
		 */
		private static final boolean isDecimalDigit(char c) {
			return c == '_' || c >= '0' && c <= '9';
		}

		/**
		 * @return true if the character c is a hexadecimal digit
		 */
		private static final boolean isHexadecimalDigit(char c) {
			return c == '_' || c >= '0' && c <= '9' ||
				c >= 'a' && c <= 'f' ||
				c >= 'A' && c <= 'F';
		}

		/**
		 * @return true if the character c is a binary digit
		 */
		private static final boolean isBinaryDigit(char c) {
			return c == '_' || c == '0' || c == '1';
		}

		/**
		 * @return true if the character c is an underscore
		 */
		private static final boolean isUnderscore(char c) {
			return c == '_';
		}

		/**
		 * Parse a literal. If there is a syntax error in the literal,
		 * an IllegalLiteral will be returned.
		 */
		public Literal parse() {
			if (getLITERAL().length() == 0)
				throw new IllegalStateException("Empty NumericLiteral");

			kind = classifyLiteral();

			Literal literal;
			if (!floating)
				literal = parseDigits();
			else
				literal = parseFractionPart();
			literal.setStart(LITERALstart);
			literal.setEnd(LITERALend);
			return literal;
		}

		/**
		 * Classify the literal.
		 *
		 * @return either DECIMAL, HEXADECIMAL or BINARY
		 */
		private int classifyLiteral() {
			if (peek(0) == '.') {
				floating = true;
				return DECIMAL;
			} else if (peek(0) == '0') {
				if (!have(2)) {
					// the only 1-length string that starts with 0 (obvious!)
					return DECIMAL;
				} else if (peek(1) == 'x' || peek(1) == 'X') {
					skip(2);
					return HEXADECIMAL;
				} else if (peek(1) == 'b' || peek(1) == 'B') {
					skip(2);
					return BINARY;
				} else {
					return DECIMAL;
				}
			} else {
				return DECIMAL;
			}
		}

		/**
		 * If the current character is an underscore, the previous and next
		 * characters need to be valid digits or underscores.
		 *
		 * @return true if the underscore is misplaced
		 */
		private boolean misplacedUnderscore() {
			// first and last characters are never allowed to be an underscore
			if (idx == 0 || idx+1 == getLITERAL().length())
				return true;

			switch (kind) {
				case DECIMAL:
					return !(isDecimalDigit(peek(-1)) && isDecimalDigit(peek(1)));
				case HEXADECIMAL:
					return !(isHexadecimalDigit(peek(-1)) && isHexadecimalDigit(peek(1)));
				case BINARY:
					return !(isBinaryDigit(peek(-1)) && isBinaryDigit(peek(1)));
			}
			throw new IllegalStateException("Unexpected literal kind");
		}

		/**
		 * Report an illegal digit.
		 */
		private Literal syntaxError(String msg) {
			String err = "in "+name()+" literal "+
				"\""+getLITERAL()+"\""+": "+msg;
			return new IllegalLiteral(err);
		}

		private Literal unexpectedCharacter(char c) {
			return syntaxError("unexpected character '"+c+"'; not a valid digit");
		}

		/**
		 * Returns a string of only the lower case digits of the
		 * parsed numeric literal.
		 */
		private String getLiteralString() {
			return buf.toString().toLowerCase();
		}

		/**
		 * Parse and build an IntegerLiteral, LongLiteral,
		 * FloatingPointLiteral or DoubleLiteral. Returns an
		 * IllegalLiteral if the numeric literal can not be
		 * parsed.
		 *
		 * Note: does not perform bounds checks.
		 *
		 * @return a concrete literal on success, or an IllegalLiteral if there is a syntax error
		 */
		private Literal buildLiteral() {
			NumericLiteral literal;
			setDigits(buf.toString().toLowerCase());

			if (!floating) {
				if (!whole)
					return syntaxError("at least one digit is required");

				// check if the literal is octal, and if so report illegal digits
				if (kind == DECIMAL) {
					if (digits.charAt(0) == '0') {
						kind = OCTAL;
						for (int idx = 1; idx < digits.length(); ++idx) {
							char c = digits.charAt(idx);
							if (c < '0' || c > '7')
								return unexpectedCharacter(c);
						}
					}
				}
				
				if (isLong)
					literal = new LongLiteral(getLITERAL());
				else
					literal = new IntegerLiteral(getLITERAL());
			} else {
				if (kind == HEXADECIMAL && !exponent)
					return syntaxError("exponent is required");

				if (!(whole || fraction))
					return syntaxError("at least one digit is required in "+
							"either the whole or fraction part");

				if (kind == HEXADECIMAL)
					digits = "0x"+digits;// digits parsed with Float or Double

				if (isFloat)
					literal = new FloatingPointLiteral(getLITERAL());
				else
					literal = new DoubleLiteral(getLITERAL());
			}

			literal.setDigits(getDigits());
			literal.setKind(getKind());
			return literal;
		}

		private Literal parseDigits() {
			// while we have at least one more character/digit
			while (have(1)) {
				char c = peek(0);
				switch (c) {
					case '_':
						if (misplacedUnderscore())
							return syntaxError("misplaced underscore - underscores may only "+
									"be used within sequences of digits");
						skip(1);
						continue;
					case '.':
						if (kind != DECIMAL && kind != HEXADECIMAL)
							return unexpectedCharacter(c);
						return parseFractionPart();
					case 'l':
					case 'L':
						if (have(2))
							return syntaxError("extra digits/characters "+
								"after suffix "+c);
						isLong = true;
						skip(1);
						continue;
					case 'f':
					case 'F':
						if (kind == BINARY)
							return unexpectedCharacter(c);
						isFloat = true;
					case 'd':
					case 'D':
						if (kind == BINARY)
							return unexpectedCharacter(c);
						if (kind != HEXADECIMAL) {
							if (have(2))
								return syntaxError("extra digits/characters "+
										"after type suffix "+c);
							floating = true;
							skip(1);
						} else {
							whole = true;
							pushChar();
						}
						continue;
				}

				switch (kind) {
					case DECIMAL:
						if (c == 'e' || c == 'E') {
							return parseExponentPart();

						} else if (c == 'f' || c == 'F') {
							if (have(2))
								return syntaxError("extra digits/characters "+
										"after type suffix "+c);
							floating = true;
							isFloat = true;
							skip(1);
						} else if (c == 'd' || c == 'D') {
							if (have(2))
								return syntaxError("extra digits/characters "+
										"after type suffix "+c);
							floating = true;
							skip(1);
						} else {
							if (!isDecimalDigit(c))
								return unexpectedCharacter(c);
							whole = true;
							pushChar();
						}
						continue;
					case HEXADECIMAL:
						if (c == 'p' || c == 'P')
							return parseExponentPart();

						if (!isHexadecimalDigit(c))
							return unexpectedCharacter(c);
						whole = true;
						pushChar();
						continue;
					case BINARY:
						if (!isBinaryDigit(c))
							return unexpectedCharacter(c);
						whole = true;
						pushChar();
						continue;
				}
			}

			return buildLiteral();
		}

		private Literal parseFractionPart() {
			floating = true;

			// current char is the decimal period
			pushChar();

			// while we have at least one more character/digit
			while (have(1)) {
				char c = peek(0);
				switch (c) {
					case '_':
						if (misplacedUnderscore())
							return syntaxError("misplaced underscore - underscores may only "+
									"be used as separators within sequences of valid digits");
						skip(1);
						continue;
					case '.':
						return syntaxError("multiple decimal periods are not allowed");
				}

				if (kind == DECIMAL) {
					if (c == 'e' || c == 'E') {
						return parseExponentPart();

					} else if (c == 'f' || c == 'F') {
						if (have(2))
							return syntaxError("extra digits/characters "+
									"after type suffix "+c);
						floating = true;
						isFloat = true;
						skip(1);
					} else if (c == 'd' || c == 'D') {
						if (have(2))
							return syntaxError("extra digits/characters "+
									"after type suffix "+c);
						floating = true;
						skip(1);
					} else {
						if (!isDecimalDigit(c))
							return unexpectedCharacter(c);
						pushChar();
						fraction = true;
					}
				} else { // kind == HEXADECIMAL
					if (c == 'p' || c == 'P')
						return parseExponentPart();

					if (!isHexadecimalDigit(c))
						return unexpectedCharacter(c);
					fraction = true;
					pushChar();
				}
			}

			return buildLiteral();
		}

		private Literal parseExponentPart() {
			floating = true;

			// current char is the exponent specifier char
			pushChar();

			// exponent sign
			if (have(1) && (peek(0) == '+' || peek(0) == '-'))
				pushChar();

			// while we have at least one more character/digit
			while (have(1)) {
				char c = peek(0);
				switch (c) {
					case '_':
						if (misplacedUnderscore())
							return syntaxError("misplaced underscore - underscores may only "+
									"be used as separators within sequences of valid digits");
						skip(1);
						continue;
					case '-':
					case '+':
						return syntaxError("exponent sign character is only allowed as "+
								"the first character of the exponent part of a "+
								"floating point literal");
					case '.':
						return syntaxError("multiple decimal periods are not allowed");
					case 'p':
					case 'P':
						return syntaxError("multiple exponent specifiers are not allowed");
					case 'f':
					case 'F':
						isFloat = true;
					case 'd':
					case 'D':
						if (have(2))
							return syntaxError("extra digits/characters "+
									"after type suffix "+c);
						skip(1);
						continue;
				}

				// exponent is a signed integer
				if (!isDecimalDigit(c))
					return unexpectedCharacter(c);
				pushChar();
				exponent = true;
			}

			return buildLiteral();
		}
	}
}
