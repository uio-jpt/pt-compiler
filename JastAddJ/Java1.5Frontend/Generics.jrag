/*
 * The JastAdd Extensible Java Compiler (http://jastadd.org) is covered
 * by the modified BSD License. You should have received a copy of the
 * modified BSD license with this compiler.
 * 
 * Copyright (c) 2005-2008, Torbjorn Ekman
 * All rights reserved.
 */

aspect Generics {

  /**
   * Qualified access for wildcard types.
   * Since they have no ordinary package and type name
   * we just return the bound access.
   */
  public Access AbstractWildcardType.createQualifiedAccess() {
    // this was suggested by Hyunik Na as a fix for bug
    // http://svn.cs.lth.se/trac/jastadd-trac/ticket/60
    return createBoundAccess();
  }

  eq ParClassDecl.hostType() = original();
  eq ParInterfaceDecl.hostType() = original();
  eq RawClassDecl.hostType() = original();
  eq RawInterfaceDecl.hostType() = original();
  eq ClassDeclSubstituted.hostType() = getOriginal();
  eq InterfaceDeclSubstituted.hostType() = getOriginal();
  eq GenericClassDeclSubstituted.hostType() = getOriginal();
  eq GenericInterfaceDeclSubstituted.hostType() = getOriginal();

  refine TypeAnalysis eq MethodAccess.type() {
    if(getNumArg() == 0 && name().equals("getClass") && decl().hostType().isObject()) {
      TypeDecl bound = isQualified() ? qualifier().type() : hostType();
      ArrayList args = new ArrayList();
      args.add(bound.erasure().asWildcardExtends());
      return ((GenericClassDecl)lookupType("java.lang", "Class")).lookupParTypeDecl(args);
    }
    else
      return refined();
  }

  // imported types are considered raw types by the name resolver
  // here we replace them by their generic counter parts
  refine TypeScopePropagation eq CompilationUnit.getChild().lookupType(String name) {
    SimpleSet result = SimpleSet.emptySet;
    for(Iterator iter = refined(name).iterator(); iter.hasNext(); ) {
      TypeDecl typeDecl = (TypeDecl)iter.next();
      if(typeDecl instanceof ParTypeDecl)
        result = result.add(((ParTypeDecl)typeDecl).genericDecl());
      else
        result = result.add(typeDecl);
    }
    return result;
  }

  refine TypeConversion eq ClassDecl.castingConversionTo(TypeDecl type) {
    TypeDecl S = this;
    TypeDecl T = type;
    if(T instanceof TypeVariable) {
      TypeVariable t = (TypeVariable)T;
      if(t.getNumTypeBound() == 0) return true;
      for(int i = 0; i < t.getNumTypeBound(); i++)
        if(castingConversionTo(t.getTypeBound(i).type()))
          return true;
      return false;
    }
    if(T.isClassDecl() && (S.erasure() != S || T.erasure() != T))
        return S.erasure().castingConversionTo(T.erasure());
    return refined(type);
  }

  refine TypeConversion eq InterfaceDecl.castingConversionTo(TypeDecl type) {
    TypeDecl S = this;
    TypeDecl T = type;
    if(T.isArrayDecl())
      return T.instanceOf(S);
    else if(T.isReferenceType() && !T.isFinal()) {
      return true;
    }
    else {
      return T.instanceOf(S);
    }
  }

  eq TypeVariable.castingConversionTo(TypeDecl type) {
    if(!type.isReferenceType())
      return false;
    if(getNumTypeBound() == 0) return true;
    for(int i = 0; i < getNumTypeBound(); i++)
      if(getTypeBound(i).type().castingConversionTo(type))
        return true;
    return false;
  }

  refine TypeConversion eq ArrayDecl.castingConversionTo(TypeDecl type) {
    TypeDecl S = this;
    TypeDecl T = type;
    if(T instanceof TypeVariable) {
      TypeVariable t = (TypeVariable)T;
      if(!type.isReferenceType())
        return false;
      if(t.getNumTypeBound() == 0) return true;
      for(int i = 0; i < t.getNumTypeBound(); i++) {
        TypeDecl bound = t.getTypeBound(i).type();
        if(bound.isObject() || bound == typeSerializable() || bound == typeCloneable())
          return true;
        if(bound.isTypeVariable() && castingConversionTo(bound))
          return true;
        if(bound.isArrayDecl() && castingConversionTo(bound))
          return true;
      }
      return false;
    }
    else
      return refined(type);
  }

  refine TypeAnalysis eq ClassAccess.type() {
    GenericClassDecl d = (GenericClassDecl)refined();
    TypeDecl type = qualifier().type();
    if(type.isPrimitiveType())
      type = type.boxed();
    ArrayList list = new ArrayList();
    list.add(type);
    return d.lookupParTypeDecl(list);
  }

  refine AutoBoxing eq ConditionalExpr.type() {
    TypeDecl type = refined();
    TypeDecl trueType = getTrueExpr().type();
    TypeDecl falseType = getFalseExpr().type();

    if(type.isUnknown()) {
      if(!trueType.isReferenceType() && !trueType.boxed().isUnknown())
        trueType = trueType.boxed();
      if(!falseType.isReferenceType() && !falseType.boxed().isUnknown())
        falseType = falseType.boxed();

      ArrayList list = new ArrayList();
      list.add(trueType);
      list.add(falseType);
      return type.lookupLUBType(list);
    }
    return type;
  }

     syn boolean TypeVariable.isNestedType() = false;

  // accessibility for members in generic classes
  // the accessibility for parameterized and raw versions of a generic class
  // should be the same as for the generic class, in other words the erasure of the 
  // paramterized version.
  eq ParClassDecl.topLevelType() = erasure().topLevelType();


  interface GenericTypeDecl {
    syn boolean isGenericType();
    TypeDecl original();
    int getNumTypeParameter();
    TypeVariable getTypeParameter(int index);
    List getTypeParameterList();
    syn lazy TypeDecl rawType();
    public String fullName();
    public String typeName();
  //
  // ES: replaced these with a syn nta(param) 
  //  public int getNumParTypeDecl();
  //  public ParTypeDecl getParTypeDecl(int index);
  //
    sons BodyDecl:BodyDecl* TypeParameter:TypeVariable* ParTypeDecl:ParTypeDecl*;
  }
  GenericClassDecl implements GenericTypeDecl;
  GenericInterfaceDecl implements GenericTypeDecl;

  eq GenericClassDecl.rawType() = lookupParTypeDecl(new ArrayList());
  eq GenericInterfaceDecl.rawType() = lookupParTypeDecl(new ArrayList());
  
  syn boolean TypeDecl.isGenericType() = false;
  eq GenericTypeDecl.isGenericType() = true;

  // Brute force replacesment with generic one in AST
  // make sure that the AST has not beed traversed yet!
  public TypeDecl TypeDecl.makeGeneric(Signatures.ClassSignature s) {
    return this;
  }
  public TypeDecl ClassDecl.makeGeneric(Signatures.ClassSignature s) {
    if(s.hasFormalTypeParameters()) {
      ASTNode node = getParent();
      int index = node.getIndexOfChild(this);
      node.setChild(
          new GenericClassDecl(
            getModifiersNoTransform(),
            getID(),
            s.hasSuperclassSignature() ? new Opt(s.superclassSignature()) : getSuperClassAccessOptNoTransform(),
            s.hasSuperinterfaceSignature() ? s.superinterfaceSignature() : getImplementsListNoTransform(),
            getBodyDeclListNoTransform(),
            s.typeParameters()
          ),
          index
      );
      return (TypeDecl)node.getChildNoTransform(index);
    }
    else {
      if(s.hasSuperclassSignature())
        setSuperClassAccessOpt(new Opt(s.superclassSignature()));
      if(s.hasSuperinterfaceSignature())
        setImplementsList(s.superinterfaceSignature());
      return this;
    }
  }

  public TypeDecl InterfaceDecl.makeGeneric(Signatures.ClassSignature s) {
    if(s.hasFormalTypeParameters()) {
      ASTNode node = getParent();
      int index = node.getIndexOfChild(this);
      node.setChild(
          new GenericInterfaceDecl(
            getModifiersNoTransform(),
            getID(),
            s.hasSuperinterfaceSignature() ? s.superinterfaceSignature() : getSuperInterfaceIdListNoTransform(),
            getBodyDeclListNoTransform(),
            s.typeParameters()
          ),
          index
      );
      return (TypeDecl)node.getChildNoTransform(index);
    }
    else {
      if(s.hasSuperinterfaceSignature())
        setSuperInterfaceIdList(s.superinterfaceSignature());
      return this;
    }
  }
  public TypeDecl GenericTypeDecl.makeGeneric(Signatures.ClassSignature s) {
    return (TypeDecl)this;
  }


  interface ParTypeDecl {
    //syn String name();
    int getNumArgument();
    Access getArgument(int index);
    syn boolean isParameterizedType();
    syn boolean isRawType();
    public String typeName();
    SimpleSet localFields(String name);
    HashMap localMethodsSignatureMap();
  }
  ParClassDecl implements ParTypeDecl;
  ParInterfaceDecl implements ParTypeDecl;
  
  syn boolean TypeDecl.isParameterizedType() = false;
  eq ParTypeDecl.isParameterizedType() = true;

  syn boolean TypeDecl.isRawType() = isNestedType() && enclosingType().isRawType();
  eq ParClassDecl.isRawType() = isNestedType() && enclosingType().isRawType();
  eq ParInterfaceDecl.isRawType() = isNestedType() && enclosingType().isRawType();
  eq RawClassDecl.isRawType() = true;
  eq RawInterfaceDecl.isRawType() = true;
}

aspect GenericsTypeAnalysis {
  eq ParTypeAccess.unqualifiedScope() = getParent() instanceof Access ? ((Access)getParent()).unqualifiedScope() : super.unqualifiedScope();
  eq ParTypeAccess.getTypeArgument().lookupType(String name) = unqualifiedScope().lookupType(name);

  eq Program.getChild().inExtendsOrImplements() = false;
  eq ClassDecl.getSuperClassAccess().inExtendsOrImplements() = true;
  eq ClassDecl.getImplements(int i).inExtendsOrImplements() = true;
  eq InterfaceDecl.getSuperInterfaceId().inExtendsOrImplements() = true;
  inh boolean Expr.inExtendsOrImplements();

  eq ParTypeAccess.type() {
    TypeDecl typeDecl = genericDecl();
    if(typeDecl instanceof GenericTypeDecl) {
      // use signature in lookup for types that are used in extends and implements clauses
      if (unqualifiedScope().inExtendsOrImplements()) {
        return ((GenericTypeDecl)typeDecl).lookupParTypeDecl(this);
      }
      ArrayList args = new ArrayList();
      for(int i = 0; i < getNumTypeArgument(); i++)
        args.add(getTypeArgument(i).type());
      return ((GenericTypeDecl)typeDecl).lookupParTypeDecl(args);
    }
    return typeDecl;
  }
  syn TypeDecl ParTypeAccess.genericDecl() = getTypeAccess().type();
  eq ParTypeAccess.isTypeAccess() = true;

  refine TypeScopePropagation eq TypeAccess.decl() {
    TypeDecl decl = refined();
    if(decl instanceof GenericTypeDecl && isRaw())
      return ((GenericTypeDecl)decl).lookupParTypeDecl(new ArrayList());
    return decl;
  }

  // this method assumes that the bound type is generic
  public boolean TypeAccess.isRaw() {
    /*
    if(hasNextAccess())
      return false;
    */
    ASTNode parent = getParent();
    while(parent instanceof AbstractDot)
      parent = parent.getParent();
    if(parent instanceof ParTypeAccess)
      return false;
    if(parent instanceof ImportDecl)
      return false;
    /*
    Access a = this;
    while(a.isTypeAccess() && hasNextAccess())
      a = a.nextAccess();
    if(a.isThisAccess() || a.isSuperAccess())
      return false;
    */
    return true;
  }

  refine TypeScopePropagation eq ThisAccess.decl() {
    TypeDecl typeDecl = refined();
    if(typeDecl instanceof ParTypeDecl)
      typeDecl = ((ParTypeDecl)typeDecl).genericDecl();
    return typeDecl;
  }
  refine TypeScopePropagation eq SuperAccess.decl() {
    TypeDecl typeDecl = refined();
    if(typeDecl instanceof ParTypeDecl)
      typeDecl = ((ParTypeDecl)typeDecl).genericDecl();
    return typeDecl;
  }

  public boolean BoundTypeAccess.isRaw() {
    return getTypeDecl().isRawType();
  }
  public boolean ParTypeAccess.isRaw() {
    return false;
  }

}

aspect GenericsErasure {
  syn lazy TypeDecl TypeDecl.erasure() {
    if(isAnonymous() || isLocalClass())
      return this;
    if(!isNestedType())
      return this;
    return extractSingleType(enclosingType().erasure().memberTypes(name()));
  }
  eq ParClassDecl.erasure() = genericDecl();
  eq ParInterfaceDecl.erasure() = genericDecl();
  eq TypeVariable.erasure() = getTypeBound(0).type().erasure(); // Skip last erasure?
  eq ArrayDecl.erasure() = componentType().erasure().arrayType();
}

aspect GenericsTypeCheck {

  // different parameterizations of the same generic interface may not be implemented
  refine TypeHierarchyCheck public void TypeDecl.typeCheck() {
    refined();
    ArrayList list = new ArrayList();
    list.addAll(implementedInterfaces());
    for(int i = 0; i < list.size(); i++) {
      InterfaceDecl decl = (InterfaceDecl)list.get(i);
      if(decl instanceof ParInterfaceDecl) {
        ParInterfaceDecl p = (ParInterfaceDecl)decl;
        for(Iterator i2 = list.listIterator(i); i2.hasNext(); ) {
          InterfaceDecl decl2 = (InterfaceDecl)i2.next();
          if(decl2 instanceof ParInterfaceDecl) {
            ParInterfaceDecl q = (ParInterfaceDecl)decl2;
            if(p != q && p.genericDecl() == q.genericDecl() && !p.sameArgument(q))
              error(p.genericDecl().name() + " cannot be inherited with different arguments: " +
                p.typeName() + " and " + q.typeName());
          }
        }
      }
    }
  }
  
  syn boolean ParTypeDecl.sameArgument(ParTypeDecl decl) {
    if(this == decl) return true;
    if(genericDecl() != decl.genericDecl())
      return false;
    for(int i = 0; i < getNumArgument(); i++) {
      TypeDecl t1 = getArgument(i).type();
      TypeDecl t2 = decl.getArgument(i).type();
      if(t1 instanceof ParTypeDecl && t2 instanceof ParTypeDecl) {
        if(!((ParTypeDecl)t1).sameArgument((ParTypeDecl)t2))
          return false;
      }
      else {
        if(t1 != t2)
          return false;
      }
    }
    return true;
  }

  syn lazy HashSet TypeDecl.implementedInterfaces() = new HashSet();
  eq ClassDecl.implementedInterfaces() {
    HashSet set = new HashSet();
    if(hasSuperclass())
      set.addAll(superclass().implementedInterfaces());
    for(Iterator iter = interfacesIterator(); iter.hasNext(); ) {
      InterfaceDecl decl = (InterfaceDecl)iter.next();
      set.add(decl);
      set.addAll(decl.implementedInterfaces());
    }
    return set;
  }
  eq InterfaceDecl.implementedInterfaces() {
    HashSet set= new HashSet();
    set.addAll(typeObject().implementedInterfaces());
    for(Iterator iter = superinterfacesIterator(); iter.hasNext(); ) {
      InterfaceDecl decl = (InterfaceDecl)iter.next();
      set.add(decl);
      set.addAll(decl.implementedInterfaces());
    }
    return set;
  }




  public void GenericClassDecl.typeCheck() {
    super.typeCheck();
    if(instanceOf(typeThrowable()))
      error(" generic class " + typeName() + " may not directly or indirectly inherit java.lang.Throwable");
  }
  public void GenericInterfaceDecl.typeCheck() {
    super.typeCheck();
    if(instanceOf(typeThrowable()))
      error(" generic interface " + typeName() + " may not directly or indirectly inherit java.lang.Throwable");
  }
  inh TypeDecl GenericClassDecl.typeThrowable();
  inh TypeDecl GenericInterfaceDecl.typeThrowable();

  public void TypeAccess.typeCheck() {
    TypeDecl type = type();
    if(type.isRawType() && type.isNestedType() && type.enclosingType().isParameterizedType() && !type.enclosingType().isRawType())
      error("Can not access a member type of a paramterized type as a raw type");
  }

  public void ParTypeAccess.typeCheck() {
    super.typeCheck();
    if(!genericDecl().isUnknown()) {
      TypeDecl type = type();
      if(!genericDecl().isGenericType()) {
        error(genericDecl().typeName() + " is not a generic type but used as one in " + this);
      }
      else if(!type.isRawType() && type.isNestedType() && type.enclosingType().isRawType())
        error("Can not access a member type of a raw type as a parameterized type");
      else {
        GenericTypeDecl decl = (GenericTypeDecl)genericDecl();
        GenericTypeDecl original = (GenericTypeDecl)decl.original();
        if(original.getNumTypeParameter() != getNumTypeArgument()) {
          error(decl.typeName() + " takes " + original.getNumTypeParameter() + " type parameters, not " + getNumTypeArgument() + " as used in " + this);
        }
        else {
          ParTypeDecl typeDecl = (ParTypeDecl)type();
          for(int i = 0; i < getNumTypeArgument(); i++) {
            if(!getTypeArgument(i).type().instanceOf(original.getTypeParameter(i))) {
              error("type argument " + i + " is of type " + getTypeArgument(i).type().typeName() 
                  + " which is not a subtype of " + original.getTypeParameter(i).typeName());
            }
          }
        }
      }
    }
  }

}

aspect GenericsNameBinding {

  eq ParClassDecl.getArgument().nameType() = NameType.TYPE_NAME;
  eq ParInterfaceDecl.getArgument().nameType() = NameType.TYPE_NAME;

  //eq GenericClassDecl.getParTypeDecl().isNestedType() = isNestedType();
  //eq GenericClassDecl.getParTypeDecl().enclosingType() = enclosingType();
  eq GenericClassDecl.getTypeParameter().isNestedType() = true;
  eq GenericClassDecl.getTypeParameter().enclosingType() = this;
  
  //eq GenericInterfaceDecl.getParTypeDecl().isNestedType() = isNestedType();
  //eq GenericInterfaceDecl.getParTypeDecl().enclosingType() = enclosingType();
  eq GenericInterfaceDecl.getTypeParameter().isNestedType() = true;
  eq GenericInterfaceDecl.getTypeParameter().enclosingType() = this;

  public SimpleSet GenericTypeDecl.addTypeVariables(SimpleSet c, String name) {
    GenericTypeDecl original = (GenericTypeDecl)original();
    for(int i = 0; i < original.getNumTypeParameter(); i++) {
      TypeVariable p = original.getTypeParameter(i);
      if(p.name().equals(name))
        c = c.add(p);
    }
    return c;
  }

  eq GenericInterfaceDecl.getSuperInterfaceId().lookupType(String name) {
    SimpleSet c = addTypeVariables(SimpleSet.emptySet, name);
    return !c.isEmpty() ? c : lookupType(name);
  }
  eq GenericClassDecl.getSuperClassAccess().lookupType(String name) {
    SimpleSet c = addTypeVariables(SimpleSet.emptySet, name);
    return !c.isEmpty() ? c : lookupType(name);
  }
  eq GenericClassDecl.getImplements().lookupType(String name) {
    SimpleSet c = addTypeVariables(SimpleSet.emptySet, name);
    return !c.isEmpty() ? c : lookupType(name);
  }

  eq GenericTypeDecl.getTypeParameter().lookupType(String name) {
    SimpleSet c = memberTypes(name);
    c = addTypeVariables(c, name);
    if(!c.isEmpty()) return c;
    // 8.5.2
    if(isClassDecl() && isStatic() && !isTopLevelType()) {
      for(Iterator iter = lookupType(name).iterator(); iter.hasNext(); ) {
        TypeDecl d = (TypeDecl)iter.next();
        if(d.isStatic() || (d.enclosingType() != null && instanceOf(d.enclosingType()))) {
          c = c.add(d);
        }
      }
    }
    else
      c = lookupType(name);
    if(!c.isEmpty())
      return c;
    return topLevelType().lookupType(name); // Fix to search imports
  }
  eq GenericTypeDecl.getBodyDecl(int index).lookupType(String name) {
    SimpleSet c = memberTypes(name);
    if(getBodyDecl(index).visibleTypeParameters())
      c = addTypeVariables(c, name);
    if(!c.isEmpty())
      return c;
    // 8.5.2
    if(isClassDecl() && isStatic() && !isTopLevelType()) {
      for(Iterator iter = lookupType(name).iterator(); iter.hasNext(); ) {
        TypeDecl d = (TypeDecl)iter.next();
        if(d.isStatic() || (d.enclosingType() != null && instanceOf(d.enclosingType()))) {
          c = c.add(d);
        }
      }
    }
    else
      c = lookupType(name);
    if(!c.isEmpty())
      return c;
    return topLevelType().lookupType(name); // Fix to search imports
    // include type parameters if not static
  }

  public void ParClassDecl.collectErrors() {
    // Disable error check for ParClassDecl which is an instanciated GenericClassDecl
  }
  public void ParInterfaceDecl.collectErrors() {
    // Disable error check for ParInterfaceDecl which is an instanciated GenericInterfaceDecl
  }

}
aspect LookupParTypeDecl {
  eq TypeVariable.fullName() {
    if(getParent().getParent() instanceof TypeDecl) {
      TypeDecl typeDecl = (TypeDecl)getParent().getParent();
      return typeDecl.fullName() + "@" + name();
    }
    return super.fullName();
  }

  syn boolean TypeDecl.sameSignature(Access a) {
    if(a instanceof ParTypeAccess) return false;
    if(a instanceof AbstractWildcard) return false;
    return this == a.type();
  }
  eq TypeVariable.sameSignature(Access a) = a.type() == this;
  syn boolean ParTypeDecl.sameSignature(Access a){
    if(a instanceof ParTypeAccess) {
      ParTypeAccess ta = (ParTypeAccess)a;
      if(genericDecl() != ta.genericDecl())
        return false;
      if(getNumArgument() != ta.getNumTypeArgument())
        return false;
      for(int i = 0; i < getNumArgument(); i++)
        if(!getArgument(i).type().sameSignature(ta.getTypeArgument(i)))
          return false;
      return true;
    }
    else if(a instanceof TypeAccess && ((TypeAccess)a).isRaw())
      return false;
    return super.sameSignature(a);
  }
  eq RawClassDecl.sameSignature(Access a) = a instanceof TypeAccess && a.type() == this;
  eq RawInterfaceDecl.sameSignature(Access a) = a instanceof TypeAccess && a.type() == this;

  eq WildcardType.sameSignature(Access a) {
    if(a instanceof Wildcard)
      return true;
    return super.sameSignature(a);
  }
  eq WildcardExtendsType.sameSignature(Access a) {
    if(a instanceof WildcardExtends)
      return getAccess().type().sameSignature(((WildcardExtends)a).getAccess());
    return super.sameSignature(a);
  }
  eq WildcardSuperType.sameSignature(Access a) {
    if(a instanceof WildcardSuper)
      return getAccess().type().sameSignature(((WildcardSuper)a).getAccess());
    return super.sameSignature(a);
  }

  syn lazy boolean ParTypeDecl.sameSignature(ArrayList list) circular [true] {
    if(getNumArgument() != list.size())
      return false;
    for(int i = 0; i < list.size(); i++)
      if(getArgument(i).type() != list.get(i))
        return false;
    return true;
  }
  
  // ES: removing these in benefit for parameterized syn nta attributes
  //syn lazy final List GenericClassDecl.getParTypeDeclList() = new List();
  //syn lazy final List GenericInterfaceDecl.getParTypeDeclList() = new List();
  

/* ES: replacing these:
  syn lazy TypeDecl GenericTypeDecl.lookupParTypeDecl(ParTypeAccess p);
  eq GenericClassDecl.lookupParTypeDecl(ParTypeAccess p) {
    for(int i = 0; i < getNumParTypeDecl(); i++) {
      ParTypeDecl decl = (ParTypeDecl)getParTypeDecl(i);
      if(!decl.isRawType() && decl.sameSignature(p))
        return (TypeDecl)decl;
    }
    ParClassDecl typeDecl = new ParClassDecl();
    typeDecl.setModifiers((Modifiers)getModifiers().fullCopy());
    typeDecl.setID(getID());
    addParTypeDecl(typeDecl);
    List list = new List();
    for(int i = 0; i < p.getNumTypeArgument(); i++)
      list.add(p.getTypeArgument(i).type().createBoundAccess());
    typeDecl.setArgumentList(list);
    // Here we should access typeDecl through an ordinary
    // child accessor instead of setting is$Final directly,
    // however doing so appears to cause unexpected behaviour!
    typeDecl.is$Final = true;
    return typeDecl;
  }
  eq GenericInterfaceDecl.lookupParTypeDecl(ParTypeAccess p) {
    for(int i = 0; i < getNumParTypeDecl(); i++) {
      ParTypeDecl decl = (ParTypeDecl)getParTypeDecl(i);
      if(!decl.isRawType() && decl.sameSignature(p))
        return (TypeDecl)decl;
    }
    ParInterfaceDecl typeDecl = new ParInterfaceDecl();
    typeDecl.setModifiers((Modifiers)getModifiers().fullCopy());
    typeDecl.setID(getID());
    addParTypeDecl(typeDecl);
    List list = new List();
    for(int i = 0; i < p.getNumTypeArgument(); i++)
      list.add(p.getTypeArgument(i).type().createBoundAccess());
    typeDecl.setArgumentList(list);
    // Here we should access typeDecl through an ordinary
    // child accessor instead of setting is$Final directly,
    // however doing so appears to cause unexpected behaviour!
    typeDecl.is$Final = true;
    return typeDecl;
  }

  // used by methods inference when looking up paramterizations from wildcards
  syn lazy final TypeDecl GenericTypeDecl.lookupParTypeDecl(ArrayList list);
  eq GenericClassDecl.lookupParTypeDecl(ArrayList list) {
    for(int i = 0; i < getNumParTypeDecl(); i++) {
      ParTypeDecl decl = (ParTypeDecl)getParTypeDecl(i);
      if(decl.isRawType() ? list.isEmpty() : (!list.isEmpty() && decl.sameSignature(list)))
        return (TypeDecl)decl;
    }
    ParClassDecl typeDecl = list.size() == 0 ? new RawClassDecl() : new ParClassDecl();
    typeDecl.setModifiers((Modifiers)getModifiers().fullCopy());
    typeDecl.setID(getID());
    addParTypeDecl(typeDecl);
    typeDecl.setArgumentList(createArgumentList(list));
    // Here we should access typeDecl through an ordinary
    // child accessor instead of setting is$Final directly,
    // however doing so appears to cause unexpected behaviour!
    typeDecl.is$Final = true;
    return typeDecl;
  }
  eq GenericInterfaceDecl.lookupParTypeDecl(ArrayList list) {
    for(int i = 0; i < getNumParTypeDecl(); i++) {
      ParTypeDecl decl = (ParTypeDecl)getParTypeDecl(i);
      if(decl.isRawType() ? list.isEmpty() : (!list.isEmpty() && decl.sameSignature(list)))
        return (TypeDecl)decl;
    }
    ParInterfaceDecl typeDecl = list.size() == 0 ? new RawInterfaceDecl() : new ParInterfaceDecl();
    typeDecl.setModifiers((Modifiers)getModifiers().fullCopy());
    typeDecl.setID(getID());
    addParTypeDecl(typeDecl);
    typeDecl.setArgumentList(createArgumentList(list));
    // Here we should access typeDecl through an ordinary
    // child accessor instead of setting is$Final directly,
    // however doing so appears to cause unexpected behaviour!
    typeDecl.is$Final = true;
    return typeDecl;
  }
  with:
*/
  // Transforms the parameter and calls the lookupParTypeDecl attribute for ArrayList arguments
  syn lazy TypeDecl GenericTypeDecl.lookupParTypeDecl(ParTypeAccess p) {
    ArrayList typeArguments = new ArrayList();
    for(int i = 0; i < p.getNumTypeArgument(); i++)
      typeArguments.add(p.getTypeArgument(i).type());
    return lookupParTypeDecl(typeArguments);
  }
  syn nta TypeDecl GenericTypeDecl.lookupParTypeDecl(ArrayList list);
  eq GenericClassDecl.lookupParTypeDecl(ArrayList list) {
    /*
    int size = createParTypeDeclStub_ArrayList_list != null ? createParTypeDeclStub_ArrayList_list.numChildren : 0;
    ParClassDecl typeDecl = (ParClassDecl)createParTypeDeclStub(list);
    if (size < createParTypeDeclStub_ArrayList_list.numChildren) {
      createParTypeDeclBody(list, typeDecl);
    }
    return typeDecl;
    */
        
    ParClassDecl typeDecl = list.size() == 0 ? new RawClassDecl() : new ParClassDecl();
    typeDecl.setModifiers((Modifiers)getModifiers().fullCopy());
    typeDecl.setID(getID());
    // ES: trying to only so this for ParClassDecl and then later for RawClassDecl 
    if (!(typeDecl instanceof RawClassDecl)) 
      typeDecl.setArgumentList(createArgumentList(list));
    return typeDecl;
    
  }
  eq GenericInterfaceDecl.lookupParTypeDecl(ArrayList list) {
    /*
    int size = createParTypeDeclStub_ArrayList_list != null ? createParTypeDeclStub_ArrayList_list.numChildren : 0;
    ParInterfaceDecl typeDecl = (ParInterfaceDecl)createParTypeDeclStub(list);
    if (size < createParTypeDeclStub_ArrayList_list.numChildren) {
      createParTypeDeclBody(list, typeDecl);
    }
    return typeDecl;
    */
    
    ParInterfaceDecl typeDecl = list.size() == 0 ? new RawInterfaceDecl() : new ParInterfaceDecl();
    typeDecl.setModifiers((Modifiers)getModifiers().fullCopy());
    typeDecl.setID(getID());
    // ES: trying to only so this for ParInterfaceDecl and then later for RawInterfaceDecl
    if (!(typeDecl instanceof RawInterfaceDecl)) 
      typeDecl.setArgumentList(createArgumentList(list));
    return typeDecl;
    
  }


  syn lazy final List RawClassDecl.getArgumentList() = ((GenericClassDecl)genericDecl()).createArgumentList(new ArrayList());
  syn lazy final List RawInterfaceDecl.getArgumentList() = ((GenericInterfaceDecl)genericDecl()).createArgumentList(new ArrayList());

/*
  syn nta TypeDecl GenericTypeDecl.createParTypeDeclStub(ArrayList list);
  eq GenericClassDecl.createParTypeDeclStub(ArrayList list) {
    ParClassDecl typeDecl = list.size() == 0 ? new RawClassDecl() : new ParClassDecl();
    return typeDecl;
  }
  eq GenericInterfaceDecl.createParTypeDeclStub(ArrayList list) {
    ParInterfaceDecl typeDecl = list.size() == 0 ? new RawInterfaceDecl() : new ParInterfaceDecl();
    return typeDecl;
  }

  public TypeDecl GenericClassDecl.createParTypeDeclBody(ArrayList list, ParClassDecl typeDecl) {
    typeDecl.setModifiers((Modifiers)getModifiers().fullCopy());
    typeDecl.setID(getID());
    typeDecl.setArgumentList(createArgumentList(list));
    return typeDecl;
  }

  public TypeDecl GenericInterfaceDecl.createParTypeDeclBody(ArrayList list, ParInterfaceDecl typeDecl) {
    typeDecl.setModifiers((Modifiers)getModifiers().fullCopy());
    typeDecl.setID(getID());
    typeDecl.setArgumentList(createArgumentList(list));
    return typeDecl;
  }
*/
  

/* ES: replacing this:
  public List GenericTypeDecl.createArgumentList(ArrayList params) {
    GenericTypeDecl original = (GenericTypeDecl)original();
    List list = new List();
    if(params.isEmpty()) 
      for(int i = 0; i < original.getNumTypeParameter(); i++)
        list.add(original.getTypeParameter(i).erasure().createBoundAccess());
    else
      for(Iterator iter = params.iterator(); iter.hasNext(); )
        list.add(((TypeDecl)iter.next()).createBoundAccess());
    return list;
  }
with:
*/
  public List GenericTypeDecl.createArgumentList(ArrayList params) {
    GenericTypeDecl original = (GenericTypeDecl)original();
    List list = new List();
    if(params.isEmpty()) {
      // Change: Don't add any thing to the list. 
      // Concern: The previous version seem to add the erasure of the type variable for some reason,  
      // maybe this is how the raw type is represented (?), but this doesn't really comply with the 
      // claim that raw types don't have any type variables...?
      for(int i = 0; i < original.getNumTypeParameter(); i++)
        list.add(original.getTypeParameter(i).erasure().createBoundAccess());
    } else
      for(Iterator iter = params.iterator(); iter.hasNext(); )
        list.add(((TypeDecl)iter.next()).createBoundAccess());
    return list;
  }


  interface Parameterization {
    boolean isRawType();
    TypeDecl substitute(TypeVariable typeVariable);
  }
  ParTypeDecl implements Parameterization;

  interface MemberSubstitutor extends Parameterization {
    TypeDecl original();
   void addBodyDecl(BodyDecl b);
    TypeDecl substitute(TypeVariable typeVariable);
  }

  ParClassDecl implements MemberSubstitutor;
  ParInterfaceDecl implements MemberSubstitutor;
  ClassDeclSubstituted implements MemberSubstitutor;
  InterfaceDeclSubstituted implements MemberSubstitutor;
  GenericClassDeclSubstituted implements MemberSubstitutor;
  GenericInterfaceDeclSubstituted implements MemberSubstitutor;

  public TypeDecl TypeDecl.substitute(TypeVariable typeVariable) {
    if(isTopLevelType())
      return typeVariable;
    return enclosingType().substitute(typeVariable);
  }
  public TypeDecl ParTypeDecl.substitute(TypeVariable typeVariable) {
    for(int i = 0; i < numTypeParameter(); i++)
      if(typeParameter(i) == typeVariable)
        return getArgument(i).type();
    return super.substitute(typeVariable);
  }
  public TypeDecl ParMethodDecl.substitute(TypeVariable typeVariable) {
    for(int i = 0; i < numTypeParameter(); i++)
      if(typeParameter(i) == typeVariable)
        return getTypeArgument(i).type();
    return genericMethodDecl().hostType().substitute(typeVariable);
  }

  public int ParTypeDecl.numTypeParameter() {
    return ((GenericTypeDecl)original()).getNumTypeParameter(); 
  }
  public TypeVariable ParTypeDecl.typeParameter(int index) {
    return ((GenericTypeDecl)original()).getTypeParameter(index);
  }
  ParMethodDecl implements Parameterization;
  public boolean ParMethodDecl.isRawType() {
    return false; 
  }
  public boolean RawMethodDecl.isRawType() {
    return true; 
  }
  public int ParMethodDecl.numTypeParameter() {
    return genericMethodDecl().original().getNumTypeParameter();
  }
  public TypeVariable ParMethodDecl.typeParameter(int index) {
    return genericMethodDecl().original().getTypeParameter(index);
  }
  
  public Access TypeDecl.substitute(Parameterization parTypeDecl) {
    if(parTypeDecl instanceof ParTypeDecl && ((ParTypeDecl)parTypeDecl).genericDecl() == this)
		  return ((TypeDecl)parTypeDecl).createBoundAccess();
	  if(isTopLevelType())
		  return createBoundAccess();
	  return enclosingType().substitute(parTypeDecl).qualifiesAccess(new TypeAccess(name()));
  }
  public Access ArrayDecl.substitute(Parameterization parTypeDecl) {
    return new ArrayTypeAccess(componentType().substitute(parTypeDecl));
  }
  public Access TypeVariable.substitute(Parameterization parTypeDecl) {
    if(parTypeDecl.isRawType())
      return erasure().createBoundAccess();
    return parTypeDecl.substitute(this).createBoundAccess();
  }
  public Access ParTypeDecl.substitute(Parameterization parTypeDecl) {
    // TODO: include nesting as well....
    if(parTypeDecl.isRawType())
      return ((GenericTypeDecl)genericDecl()).rawType().createBoundAccess();
    if(!usesTypeVariable())
      return super.substitute(parTypeDecl);
    List list = new List();
    for(int i = 0; i < getNumArgument(); i++)
      list.add(getArgument(i).type().substitute(parTypeDecl));
    return new ParTypeAccess(genericDecl().createQualifiedAccess(), list);
  }
  public Access RawClassDecl.substitute(Parameterization parTypeDecl) { return createBoundAccess(); }
  public Access RawInterfaceDecl.substitute(Parameterization parTypeDecl) { return createBoundAccess(); }

  public Access WildcardExtendsType.substitute(Parameterization parTypeDecl) {
    if(!usesTypeVariable())
      return super.substitute(parTypeDecl);
    return new WildcardExtends(getAccess().type().substitute(parTypeDecl));
  }
  public Access WildcardSuperType.substitute(Parameterization parTypeDecl) {
    if(!usesTypeVariable())
      return super.substitute(parTypeDecl);
    return new WildcardSuper(getAccess().type().substitute(parTypeDecl));
  }
  
  public Access TypeDecl.substituteReturnType(Parameterization parTypeDecl) {
    return substitute(parTypeDecl);
  }
  public Access ArrayDecl.substituteReturnType(Parameterization parTypeDecl) {
    return new ArrayTypeAccess(componentType().substituteReturnType(parTypeDecl));
  }
  inh TypeDecl TypeVariable.typeObject();
  
  syn lazy TypeDecl TypeVariable.lubType() {
    ArrayList list = new ArrayList();
    for(int i = 0; i < getNumTypeBound(); i++)
      list.add(getTypeBound(i).type());
    return lookupLUBType(list);
  }

  public Access TypeVariable.substituteReturnType(Parameterization parTypeDecl) {
    if(parTypeDecl.isRawType())
      return erasure().createBoundAccess();
    TypeDecl typeDecl = parTypeDecl.substitute(this);
    if(typeDecl instanceof WildcardType) {
      // the bound of this type variable
      return createBoundAccess();
      //return lubType().createBoundAccess();
      //return typeObject().createBoundAccess();
    }
    else if(typeDecl instanceof WildcardExtendsType) {
      if(typeDecl.instanceOf(this))
        return ((WildcardExtendsType)typeDecl).extendsType().createBoundAccess();
      else 
        return createBoundAccess();

      // the bound of this type variable of the bound of the wild card if it is more specific
      //return ((WildcardExtendsType)typeDecl).extendsType().createBoundAccess();
    }
    else if(typeDecl instanceof WildcardSuperType) {
      // the bound of this type variable 
      return createBoundAccess();
      //return typeObject().createBoundAccess();
    }
    return typeDecl.createBoundAccess();
  }
  public Access RawClassDecl.substituteReturnType(Parameterization parTypeDecl) { return createBoundAccess(); }
  public Access RawInterfaceDecl.substituteReturnType(Parameterization parTypeDecl) { return createBoundAccess(); }

  public Access TypeDecl.substituteParameterType(Parameterization parTypeDecl) {
    return substitute(parTypeDecl);
  }

  inh TypeDecl TypeVariable.typeNull();
  public Access TypeVariable.substituteParameterType(Parameterization parTypeDecl) {
    if(parTypeDecl.isRawType())
      return erasure().createBoundAccess();
    TypeDecl typeDecl = parTypeDecl.substitute(this);
    if(typeDecl instanceof WildcardType)
      return typeNull().createQualifiedAccess();
    else if(typeDecl instanceof WildcardExtendsType)
      return typeNull().createQualifiedAccess();
    else if(typeDecl instanceof WildcardSuperType)
      return ((WildcardSuperType)typeDecl).superType().createBoundAccess();
    return typeDecl.createBoundAccess();
  }
  public Access RawClassDecl.substituteParameterType(Parameterization parTypeDecl) { return createBoundAccess(); }
  public Access RawInterfaceDecl.substituteParameterType(Parameterization parTypeDecl) { return createBoundAccess(); }

  public List List.substitute(Parameterization parTypeDecl) {
    List list = new List();
    for(int i = 0; i < getNumChild(); i++) {
      ASTNode node = getChild(i);
      if(node instanceof Access) {
        Access a = (Access)node;
        list.add(a.type().substitute(parTypeDecl));
      }
      else if(node instanceof VariableArityParameterDeclaration) {
        VariableArityParameterDeclaration p = (VariableArityParameterDeclaration)node;
        list.add(
          new VariableArityParameterDeclarationSubstituted(
            (Modifiers)p.getModifiers().fullCopy(),
            // use the type acces since VariableArity adds to the dimension
            p.getTypeAccess().type().substituteParameterType(parTypeDecl),
            p.getID(),
            p
          )
        );
      }
      else if(node instanceof ParameterDeclaration) {
        ParameterDeclaration p = (ParameterDeclaration)node;
        list.add(
          new ParameterDeclarationSubstituted(
            (Modifiers)p.getModifiers().fullCopy(),
            p.type().substituteParameterType(parTypeDecl),
            p.getID(),
            p
          )
        );
      }
      else {
        throw new Error("Can only substitute lists of access nodes but node number " + i + " is of type " + node.getClass().getName());
      }
    }
    return list;
  }

  syn lazy Opt ParClassDecl.getSuperClassAccessOpt() {
    GenericClassDecl decl = (GenericClassDecl)genericDecl();
    Opt opt;
    //System.err.println("Begin substituting extends clause");
    if(decl.hasSuperClassAccess())
      opt = new Opt((decl.getSuperClassAccess().type().substitute(this)));
    else
      opt = new Opt();
    //System.err.println("End substituting extends clause");
    return opt;
  }
  syn lazy List ParClassDecl.getImplementsList() {
    GenericClassDecl decl = (GenericClassDecl)genericDecl();
    //System.err.println("Begin substituting implements list");
    List list = decl.getImplementsList().substitute(this);
    //System.err.println("End substituting implements list");
    return list;
  }
  // ES: Creating instance of List subclass instead
  //syn lazy List ParClassDecl.getBodyDeclList() = new List();
  syn lazy List ParClassDecl.getBodyDeclList() = new BodyDeclList();

  syn lazy List ParInterfaceDecl.getSuperInterfaceIdList() {
    GenericInterfaceDecl decl = (GenericInterfaceDecl)genericDecl();
    //System.err.println("Begin substituting implements list");
    List list = decl.getSuperInterfaceIdList().substitute(this);
    //System.err.println("End substituting implements list");
    return list;
  }

  // ES: Creating instance of List subclass instead of List
  //syn lazy List ParInterfaceDecl.getBodyDeclList() = new List();
  syn lazy List ParInterfaceDecl.getBodyDeclList() = new BodyDeclList();

  // ES: Adding creation of NTA list to types implementing MemberSubstitutor
  syn lazy List ClassDeclSubstituted.getBodyDeclList() = new BodyDeclList();
  syn lazy List InterfaceDeclSubstituted.getBodyDeclList() = new BodyDeclList();
  syn lazy List GenericClassDeclSubstituted.getBodyDeclList() = new BodyDeclList();
  syn lazy List GenericInterfaceDeclSubstituted.getBodyDeclList() = new BodyDeclList();


  syn boolean ASTNode.usesTypeVariable() {
    for(int i = 0; i < getNumChild(); i++)
      if(getChild(i).usesTypeVariable())
        return true;
    return false;
  }
  syn lazy boolean MethodDecl.usesTypeVariable() = 
    getModifiers().usesTypeVariable() || getTypeAccess().usesTypeVariable() ||
    getParameterList().usesTypeVariable() || getExceptionList().usesTypeVariable();
  syn lazy boolean FieldDeclaration.usesTypeVariable() = getTypeAccess().usesTypeVariable();
  eq TypeAccess.usesTypeVariable() = decl().usesTypeVariable() || super.usesTypeVariable();
  
  syn lazy boolean TypeDecl.usesTypeVariable() circular [false] = isNestedType() && enclosingType().usesTypeVariable();
  eq ParTypeDecl.usesTypeVariable() {
    if(super.usesTypeVariable())
      return true;
    for(int i = 0; i < getNumArgument(); i++)
      if(getArgument(i).type().usesTypeVariable())
        return true;
    return false;
  }
  eq GenericClassDecl.usesTypeVariable() = true;
  eq GenericInterfaceDecl.usesTypeVariable() = true;
  eq TypeVariable.usesTypeVariable() = true;
  eq WildcardExtendsType.usesTypeVariable() = getAccess().type().usesTypeVariable();
  eq WildcardSuperType.usesTypeVariable() = getAccess().type().usesTypeVariable();
  eq ArrayDecl.usesTypeVariable() = elementType().usesTypeVariable();

  syn lazy final HashMap MemberSubstitutor.localMethodsSignatureMap() {
    HashMap map = new HashMap();
    for(Iterator iter = original().localMethodsIterator(); iter.hasNext(); ) {
      MethodDecl decl = (MethodDecl)iter.next();

      /* ES removing this:
      if(!decl.isStatic() && (decl.usesTypeVariable() || isRawType())) {
        BodyDecl b = decl.substitutedBodyDecl(this);
        addBodyDecl(b);
      	// Here we should access b through an ordinary
      	// child accessor instead of setting is$Final directly,
      	// however doing so appears to cause unexpected behaviour!
        b.is$Final = true;
        decl = (MethodDecl) b;
      }
      map.put(decl.signature(), decl);
      * and replacing with:
      */
      if(!decl.isStatic() && (decl.usesTypeVariable() || isRawType())) {
        BodyDecl copyDecl = ((BodyDeclList)getBodyDeclList()).localMethodSignatureCopy(decl, this);
        decl = (MethodDecl) copyDecl;
      }
      map.put(decl.signature(), decl);

    }
    return map;
  }


  // ES: Adding NTA to keep copies in
  syn nta BodyDecl BodyDeclList.localMethodSignatureCopy(MethodDecl originalMethod, MemberSubstitutor m) {
     return originalMethod.substitutedBodyDecl(m);
  }


  syn lazy final SimpleSet MemberSubstitutor.localFields(String name) {
    SimpleSet set = SimpleSet.emptySet;
    for(Iterator iter = original().localFields(name).iterator(); iter.hasNext(); ) {
      FieldDeclaration f = (FieldDeclaration)iter.next();

      /* ES removing this:   
      if(!f.isStatic() && (f.usesTypeVariable() || isRawType())) {
        BodyDecl b = f.substitutedBodyDecl(this);
        addBodyDecl(b);
      	// Here we should access b through an ordinary
      	// child accessor instead of setting is$Final directly,
      	// however doing so appears to cause unexpected behaviour!
        b.is$Final = true;
        f = (FieldDeclaration) b;
      }
      set = set.add(f);
      * and replacing with:
      */
      if(!f.isStatic() && (f.usesTypeVariable() || isRawType())) {
        BodyDecl fCopy = ((BodyDeclList)getBodyDeclList()).localFieldCopy(f, this);
        f = (FieldDeclaration) fCopy;
      }
      set = set.add(f);

    }
    return set;
  }

  // ES: Adding NTA to keep copies in
  syn nta BodyDecl BodyDeclList.localFieldCopy(FieldDeclaration originalDecl, MemberSubstitutor m) {
    return originalDecl.substitutedBodyDecl(m);
  }


    // TODO-ES: Add NTA for copies like above
  syn lazy final SimpleSet MemberSubstitutor.localTypeDecls(String name) circular [SimpleSet.emptySet] {
    SimpleSet set = SimpleSet.emptySet;
    for(Iterator iter = original().localTypeDecls(name).iterator(); iter.hasNext(); ) {
      TypeDecl t = (TypeDecl)iter.next();

      /* ES: removing this:
      if(t.isStatic())
        set = set.add(t);
      else {
        BodyDecl b;
        TypeDecl typeDecl;
        if(t instanceof ClassDecl) {
          ClassDecl classDecl = (ClassDecl)t;
          typeDecl = classDecl.substitutedClassDecl(this);
          b = new MemberClassDecl((ClassDecl)typeDecl);
          addBodyDecl(b);
      	  // Here we should access b through an ordinary
      	  // child accessor instead of setting is$Final directly,
      	  // however doing so appears to cause unexpected behaviour!
      	  b.is$Final = true;
          set = set.add(typeDecl);
        }
        else if(t instanceof InterfaceDecl) {
          InterfaceDecl interfaceDecl = (InterfaceDecl)t;
          typeDecl = interfaceDecl.substitutedInterfaceDecl(this);
          b = new MemberInterfaceDecl((InterfaceDecl)typeDecl);
          addBodyDecl(b);
      	  // Here we should access b through an ordinary
      	  // child accessor instead of setting is$Final directly,
      	  // however doing so appears to cause unexpected behaviour!
      	  b.is$Final = true;
          set = set.add(typeDecl);
        }
      }
      * and replacing with:
      */
      if(t.isStatic()) {
        set = set.add(t);
      } else if (t instanceof ClassDecl) {
        MemberClassDecl copy = ((BodyDeclList)getBodyDeclList()).localClassDeclCopy((ClassDecl)t, this);
        set = set.add(copy.getClassDecl());
      } else if (t instanceof InterfaceDecl) {
        MemberInterfaceDecl copy = ((BodyDeclList)getBodyDeclList()).localInterfaceDeclCopy((InterfaceDecl)t, this);
        set = set.add(copy.getInterfaceDecl());
      }
    }
    return set;
  }

  // ES: adding NTA to store copies in
  syn nta MemberClassDecl BodyDeclList.localClassDeclCopy(ClassDecl originalDecl, MemberSubstitutor m) {
    ClassDecl copy = originalDecl.substitutedClassDecl(m);
    return new MemberClassDecl(copy);
  }
  syn nta MemberInterfaceDecl BodyDeclList.localInterfaceDeclCopy(InterfaceDecl originalDecl, MemberSubstitutor m) {
    InterfaceDecl copy = originalDecl.substitutedInterfaceDecl(m);
    return new MemberInterfaceDecl(copy);
  }

  syn lazy Collection MemberSubstitutor.constructors() {
    Collection set = new ArrayList();
    for(Iterator iter = original().constructors().iterator(); iter.hasNext(); ) {
      ConstructorDecl c = (ConstructorDecl)iter.next();

      /* ES: removing this:
      BodyDecl b = c.substitutedBodyDecl(this);
      addBodyDecl(b);
      // Here we should access b through an ordinary
      // child accessor instead of setting is$Final directly,
      // however doing so appears to cause unexpected behaviour!
      b.is$Final = true;
      * and replacing with:
      */
      BodyDecl b = ((BodyDeclList)getBodyDeclList()).constructorCopy(c, this);
      set.add(b);
    }
    return set;
  }

  // ES: adding NTA to store copies in 
  syn nta BodyDecl BodyDeclList.constructorCopy(ConstructorDecl originalDecl, MemberSubstitutor m) {
    return originalDecl.substitutedBodyDecl(m);
  }

  public BodyDecl BodyDecl.substitutedBodyDecl(Parameterization parTypeDecl) {
    throw new Error("Operation substitutedBodyDecl not supported for " + getClass().getName());
  }

  public BodyDecl MethodDecl.substitutedBodyDecl(Parameterization parTypeDecl) {
    //System.out.println("Begin substituting " + signature() + " in " + hostType().typeName() + " with " + parTypeDecl.typeSignature());
    MethodDecl m = new MethodDeclSubstituted(
      (Modifiers)getModifiers().fullCopy(),
      getTypeAccess().type().substituteReturnType(parTypeDecl),
      getID(),
      getParameterList().substitute(parTypeDecl),
      getExceptionList().substitute(parTypeDecl),
      substituteBody(parTypeDecl),
      this
    );
    //System.out.println("End substituting " + signature());
    return m;
  }

  public Opt MethodDecl.substituteBody(Parameterization parTypeDecl) {
    return new Opt();
  }

  public BodyDecl GenericMethodDecl.substitutedBodyDecl(Parameterization parTypeDecl) {
    //System.out.println("Begin substituting generic " + signature() + " in " + hostType().typeName() + " with " + parTypeDecl.typeSignature());
    GenericMethodDecl m = new GenericMethodDecl(
      (Modifiers)getModifiers().fullCopy(),
      getTypeAccess().type().substituteReturnType(parTypeDecl),
      getID(),
      getParameterList().substitute(parTypeDecl),
      getExceptionList().substitute(parTypeDecl),
      new Opt(),
      (List)getTypeParameterList().fullCopy()
    );
    m.original = this;
    //System.out.println("End substituting generic " + signature());
    return m;
  }
  syn GenericMethodDecl GenericMethodDecl.original() = original != null ? original : this;
  public GenericMethodDecl GenericMethodDecl.original;
  
  syn GenericConstructorDecl GenericConstructorDecl.original() = original != null ? original : this;
  public GenericConstructorDecl GenericConstructorDecl.original;
  

  public BodyDecl ConstructorDecl.substitutedBodyDecl(Parameterization parTypeDecl) {
    ConstructorDecl c = new ConstructorDeclSubstituted(
      (Modifiers)getModifiers().fullCopy(),
      getID(),
      getParameterList().substitute(parTypeDecl),
      getExceptionList().substitute(parTypeDecl),
      new Opt(),
      new Block(),
      this
    );
    return c;
  }
  public BodyDecl FieldDeclaration.substitutedBodyDecl(Parameterization parTypeDecl) {
    FieldDeclaration f = new FieldDeclarationSubstituted(
      (Modifiers)getModifiers().fullCopy(),
      getTypeAccess().type().substituteReturnType(parTypeDecl),
      getID(),
      new Opt(),
      this
    );
    return f;
  }

  syn TypeDecl TypeDecl.original() = this;
  eq ClassDeclSubstituted.original() = getOriginal().original();
  eq InterfaceDeclSubstituted.original() = getOriginal().original();
  eq GenericClassDeclSubstituted.original() = getOriginal().original();
  eq GenericInterfaceDeclSubstituted.original() = getOriginal().original();
  eq ParTypeDecl.original() = genericDecl().original();

  public ClassDecl ClassDecl.substitutedClassDecl(Parameterization parTypeDecl) {
    ClassDecl c = new ClassDeclSubstituted(
      (Modifiers)getModifiers().fullCopy(),
      getID(),
      hasSuperClassAccess() ? new Opt(getSuperClassAccess().type().substitute(parTypeDecl)) : new Opt(),
      getImplementsList().substitute(parTypeDecl),
     // ES:  new List(), 
      this
    );
    return c;
  }
  public ClassDecl GenericClassDecl.substitutedClassDecl(Parameterization parTypeDecl) {
    GenericClassDecl c = new GenericClassDeclSubstituted(
      (Modifiers)getModifiers().fullCopy(),
      getID(),
      hasSuperClassAccess() ? new Opt(getSuperClassAccess().type().substitute(parTypeDecl)) : new Opt(),
      getImplementsList().substitute(parTypeDecl),
    // ES:   new List(),
      new List(), // delegates TypeParameter lookup to original 
      this
    );
    return c;
  }
  public InterfaceDecl InterfaceDecl.substitutedInterfaceDecl(Parameterization parTypeDecl) {
    InterfaceDecl c = new InterfaceDeclSubstituted(
      (Modifiers)getModifiers().fullCopy(),
      getID(),
      getSuperInterfaceIdList().substitute(parTypeDecl),
     // ES:  new List(),
      this
    );
    return c;
  }
  public InterfaceDecl GenericInterfaceDecl.substitutedInterfaceDecl(Parameterization parTypeDecl) {
    GenericInterfaceDecl c = new GenericInterfaceDeclSubstituted(
      (Modifiers)getModifiers().fullCopy(),
      getID(),
      getSuperInterfaceIdList().substitute(parTypeDecl),
     // ES:  new List(),
      new List(), // delegates TypeParameter lookup to original
      this
    );
    return c;
  }

  syn nta WildcardsCompilationUnit Program.wildcards() {
    return new WildcardsCompilationUnit(
      "wildcards",
      new List(),
      new List()
    );
  }

  syn TypeDecl WildcardExtendsType.extendsType() = getAccess().type();
  syn TypeDecl WildcardSuperType.superType() = getAccess().type();

  eq Wildcard.type() = typeWildcard();
  eq WildcardExtends.type() = lookupWildcardExtends(getAccess().type());
  eq WildcardSuper.type() = lookupWildcardSuper(getAccess().type());
  inh TypeDecl WildcardSuper.lookupWildcardSuper(TypeDecl typeDecl);
  inh TypeDecl WildcardExtends.lookupWildcardExtends(TypeDecl typeDecl);
  inh TypeDecl Wildcard.typeWildcard();

  syn nta TypeDecl WildcardsCompilationUnit.typeWildcard() {
    TypeDecl decl = new WildcardType(
      new Modifiers(new List().add(new Modifier("public"))),
      "?",
      new List()
    );
    return decl;
  }
  inh TypeDecl TypeDecl.typeWildcard();
  eq Program.getChild().typeWildcard() = wildcards().typeWildcard();

  syn nta TypeDecl WildcardsCompilationUnit.lookupWildcardExtends(TypeDecl bound) {
    TypeDecl decl = new WildcardExtendsType(
      new Modifiers(new List().add(new Modifier("public"))),
      "? extends " + bound.fullName(),
      new List(),
      bound.createBoundAccess()
    );
    return decl;
  }
  eq Program.getChild().lookupWildcardExtends(TypeDecl typeDecl) = wildcards().lookupWildcardExtends(typeDecl);
  inh TypeDecl TypeDecl.lookupWildcardExtends(TypeDecl typeDecl);
  syn TypeDecl TypeDecl.asWildcardExtends() = lookupWildcardExtends(this);

  syn nta TypeDecl WildcardsCompilationUnit.lookupWildcardSuper(TypeDecl bound) {
    TypeDecl decl = new WildcardSuperType(
      new Modifiers(new List().add(new Modifier("public"))),
      "? super " + bound.fullName(),
      new List(),
      bound.createBoundAccess()
    );
    return decl;
  }
  eq Program.getChild().lookupWildcardSuper(TypeDecl typeDecl) = wildcards().lookupWildcardSuper(typeDecl);
  inh TypeDecl TypeDecl.lookupWildcardSuper(TypeDecl typeDecl);
  syn TypeDecl TypeDecl.asWildcardSuper() = lookupWildcardSuper(this);

  syn nta LUBType WildcardsCompilationUnit.lookupLUBType(Collection bounds) = createLUBType(bounds);
  public static LUBType WildcardsCompilationUnit.createLUBType(Collection bounds) {
    List boundList = new List();
    StringBuffer name = new StringBuffer();
    for(Iterator iter = bounds.iterator(); iter.hasNext(); ) {
      TypeDecl typeDecl = (TypeDecl)iter.next();
      boundList.add(typeDecl.createBoundAccess());
      name.append("& " + typeDecl.typeName());
    }
    LUBType decl = new LUBType(
      new Modifiers(new List().add(new Modifier("public"))),
      name.toString(),
      new List(),
      boundList
    );
    return decl;
  }
  inh LUBType TypeDecl.lookupLUBType(Collection bounds);
  eq Program.getChild().lookupLUBType(Collection bounds) = 
    wildcards().lookupLUBType(bounds);

  syn String LUBType.typeName() {
    if(getNumTypeBound() == 0)
      return "<NOTYPE>";
    StringBuffer s = new StringBuffer();
    s.append(getTypeBound(0).type().typeName());
    for(int i = 1; i < getNumTypeBound(); i++)
      s.append(" & " + getTypeBound(i).type().typeName());
    return s.toString();
  }

  public HashSet LUBType.implementedInterfaces(){
       HashSet ret = new HashSet();
       for (int i = 0; i < getNumTypeBound(); i++) {
           ret.addAll(getTypeBound(i).type().implementedInterfaces());
       }
       return ret;
   }

  syn nta GLBType WildcardsCompilationUnit.lookupGLBType(ArrayList bounds) {
    List boundList = new List();
    StringBuffer name = new StringBuffer();
    for(Iterator iter = bounds.iterator(); iter.hasNext(); ) {
      TypeDecl typeDecl = (TypeDecl)iter.next();
      boundList.add(typeDecl.createBoundAccess());
      name.append("& " + typeDecl.typeName());
    }
    GLBType decl = new GLBType(
      new Modifiers(new List().add(new Modifier("public"))),
      name.toString(),
      new List(),
      boundList
    );
    return decl;
  }
  inh GLBType TypeDecl.lookupGLBType(ArrayList bounds);
  eq Program.getChild().lookupGLBType(ArrayList bounds) = 
    wildcards().lookupGLBType(bounds);

  syn String GLBType.typeName() {
    if(getNumTypeBound() == 0)
      return "<NOTYPE>";
    StringBuffer s = new StringBuffer();
    s.append(getTypeBound(0).type().typeName());
    for(int i = 1; i < getNumTypeBound(); i++)
      s.append(" & " + getTypeBound(i).type().typeName());
    return s.toString();
  }

  public HashSet GLBType.implementedInterfaces(){
    HashSet ret = new HashSet();
    for (int i = 0; i < getNumTypeBound(); i++) {
      ret.addAll(getTypeBound(i).type().implementedInterfaces());
    }
    return ret;
  }

}


aspect NewGenerics {

  public Access TypeVariable.createQualifiedAccess() {
    return createBoundAccess();
  }

  eq TypeVariable.accessibleFrom(TypeDecl type) = true;

  eq TypeVariable.typeName() = name();
}
aspect SourceDeclarations {
  syn lazy TypeDecl TypeDecl.sourceTypeDecl() = this;
  eq ParTypeDecl.sourceTypeDecl() = genericDecl().original().sourceTypeDecl();
  eq ClassDeclSubstituted.sourceTypeDecl() = original().sourceTypeDecl();
  eq InterfaceDeclSubstituted.sourceTypeDecl() = original().sourceTypeDecl();
  eq GenericClassDeclSubstituted.sourceTypeDecl() = original().sourceTypeDecl();
  eq GenericInterfaceDeclSubstituted.sourceTypeDecl() = original().sourceTypeDecl();

  syn lazy MethodDecl MethodDecl.sourceMethodDecl() = this;
  eq ParMethodDecl.sourceMethodDecl() = genericMethodDecl().original().sourceMethodDecl();
  eq MethodDeclSubstituted.sourceMethodDecl() = getOriginal().sourceMethodDecl();

  syn lazy ConstructorDecl ConstructorDecl.sourceConstructorDecl() = this;
  eq ParConstructorDecl.sourceConstructorDecl() = genericConstructorDecl().original().sourceConstructorDecl();
  eq ConstructorDeclSubstituted.sourceConstructorDecl() = getOriginal().sourceConstructorDecl();

  syn lazy Variable Variable.sourceVariableDecl();
  eq VariableDeclaration.sourceVariableDecl() = this;
  eq FieldDeclaration.sourceVariableDecl() = this;
  eq FieldDeclarationSubstituted.sourceVariableDecl() = getOriginal().sourceVariableDecl();
  eq ParameterDeclaration.sourceVariableDecl() = this;
  eq ParameterDeclarationSubstituted.sourceVariableDecl() = getOriginal().sourceVariableDecl();
 
}
