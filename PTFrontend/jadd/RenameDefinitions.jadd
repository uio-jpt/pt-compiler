aspect RenameDefinitions {
    public void ClassDecl.renameDefinitions(HashMap<String,String> namesMap) {
        HashMap <String,MethodDecl>methods = methodsSignatureMap();
        HashMap <String,SimpleSet> fields = memberFieldsMap();

        for (MethodDecl decl : methods.values()) {
            if (namesMap.containsKey(decl.getID())) {
                String newID = namesMap.get(decl.getID());
                decl.setID(newID);
                decl.wasExplicitlyRenamed = true;
            }
        }

        for (SimpleSet simpleSet : fields.values()) {
            for (Iterator iter = simpleSet.iterator(); iter.hasNext();) {
                FieldDeclaration fieldDecl = (FieldDeclaration) iter.next();
                if (namesMap.containsKey(fieldDecl.getID())) {
                    String newID = namesMap.get(fieldDecl.getID());
                    fieldDecl.setID(newID);
                    fieldDecl.wasExplicitlyRenamed = true;
                }
            }
        }
    }

    public HashSet<String> ClassDecl.getBodyDeclMethodNames() {
        HashSet <String> names = new HashSet<String>();

        for (BodyDecl decl : getBodyDeclList()) {
            String name = decl.getName();
            if (name != null) {
                names.add(name);
            }
        }
        return names;
    }
    
    /* TODO, fields and methods may collide. */
    public HashSet<String> ClassDecl.getDefinitionsRenamed(HashMap<String,String> namesMap) {
        HashSet <String> definitionNames = new HashSet<String>();

        for (String name : getBodyDeclMethodNames()) {
            if (namesMap.containsKey(name))
                name = namesMap.get(name);
            definitionNames.add(name);
        }
        return definitionNames;
    }
}
