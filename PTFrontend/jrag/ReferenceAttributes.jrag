aspect ReferenceAttributes {

    syn PTTemplate PTInstDecl.getTemplate() = getTemplate(getID());
    syn PTTemplate PTDummyClass.getTemplate() = getInstDecl().getTemplate();
    inh PTTemplate PTInstDecl.getTemplate(String name);
    inh PTInstDecl PTDummyClass.getInstDecl();
    eq PTInstDecl.getPTDummyClass(int i).getInstDecl() = this;

    eq PTCompilationUnit.getPTDecl(int i).getTemplate(String name) {
        for (PTDecl decl: getPTDecls()) {
            PTTemplate template = decl.lookupTemplate(name);
            if (template != null) {
                return template;
            }
        }
        return null;
    }

    syn HashMap<String,String> PTInstDecl.getRenamedClasses() {
        HashMap<String,String> renamedClasses = new HashMap<String,String>();
        for (PTDummyClass dummy: getPTDummyClassList()) 
            renamedClasses.put(dummy.getOrgID(),dummy.getID());
        return renamedClasses; 
    }

    syn HashMap<String,LinkedList<PTDummyClass>> PTDecl.getClassNamesWithDummyList() {
        HashMap<String,LinkedList<PTDummyClass>> nameAndDummies =
            new HashMap<String,LinkedList<PTDummyClass>>();

    //          inst .. with source  => target
    //          inst .. with source2 => target
    //
    //          String = target class
    //          LinkedList = list of source classes

        for (PTInstDecl templateInst : getPTInstDecls()) {
            for (PTDummyClass dummy : templateInst.getPTDummyClassList()) {
                String name = dummy.getID();
                if (!nameAndDummies.containsKey(name))
                    nameAndDummies.put(name,new LinkedList<PTDummyClass>());
                LinkedList<PTDummyClass> dummies = nameAndDummies.get(name);
                dummies.add(dummy);
            }
        }
        return nameAndDummies;
    }

    eq PTMergedMethodAccess.name() = "super[" + getSuperClassID() + "]." + getID();
    eq PTMergedConstructorAccess.name() = "super[" + getSuperClassID() + "]";

    /*    
    coll LinkedList<PTMergedConstructor> ClassDecl.getMergedConstructors() [new LinkedList<PTMergedConstructor>()]
        with add root ClassDecl;
    PTMergedConstructor contributes this to ClassDecl.getMergedConstructors() for getClassDecl();
    */

    syn HashSet<String> ConstructorDecl.getMergedClassesWithConstructors() =
        getClassDecl().getMergedClassesWithConstructors();

    syn ClassDecl BodyDecl.getClassDecl() = ((ClassDecl)getParentClass(ClassDecl.class));

    coll HashSet<String> ClassDecl.getMergedClassesWithConstructors() [new HashSet<String>()]
        with add root ClassDecl;
    PTMergedConstructor contributes getSuperClassID() to ClassDecl.getMergedClassesWithConstructors() for getClassDecl();    
    
    coll HashSet<String> ConstructorDecl.getMergedSuperCallNames() [new HashSet<String>()]
        with add root ClassDecl;
    PTMergedConstructorAccess contributes getSuperClassID() to ConstructorDecl.getMergedSuperCallNames()
        for getConstructorDecl();

    syn ConstructorDecl PTMergedConstructorAccess.getConstructorDecl() = ((ConstructorDecl)
                                                                     getParentClass(ConstructorDecl.class));
    
    syn String PTMergedConstructor.getName() = String.format("super[%s]",getID());
    
}
