CompilationUnit compilation_unit =
package_declaration.p import_declarations.i? pt_declaration.pt+ {: return new PTCompilationUnit(p.getID(), i, new List<TypeDecl>(), pt); :}
| import_declarations.i? pt_declaration.pt+ {: return new PTCompilationUnit("", i, new List<TypeDecl>(), pt); :}
;

PTDecl pt_declaration =
  pt_template.t
  {: return t; :}
| pt_package.p
  {: return p; :}
;

PTDecl pt_template =
 TEMPLATE IDENTIFIER LBRACE pt_inst_decl.pt_inst* pt_simple_declaration.pt_class* RBRACE
          {: return new PTTemplate(IDENTIFIER, pt_inst, pt_class); :}
;

PTDecl pt_package =
 PACKAGE IDENTIFIER LBRACE pt_inst_decl.pt_inst+ pt_simple_declaration.pt_class* RBRACE
          {: return new PTPackage(IDENTIFIER, pt_inst, pt_class); :}
;

SimpleClass pt_simple_declaration =
  class_declaration.cd
              {: return new PTClassDecl(cd); :}
| adds_class.ac 
              {: return new PTClassAddsDecl(ac); :}
;

PTInstDecl pt_inst_decl =
  INST IDENTIFIER SEMICOLON
       {: return new PTInstDecl(IDENTIFIER, new List()); :}
| INST IDENTIFIER WITH dummy_class_list.dcl SEMICOLON
       {: return new PTInstDecl(IDENTIFIER, dcl); :}
;

List dummy_class_list =
      dummy_class_list.dcl COMMA dummy_inst_tuple.t {: return dcl.add(t); :}
    | dummy_inst_tuple.t {: return new List().add(t); :}
    ;

PTDummyClass dummy_inst_tuple =
    IDENTIFIER.a RIGHTARROW IDENTIFIER.b 
    dummy_inst_tuple_rename_list_opt.l
    {: return new PTDummyClass(a,b,l); :}
    ;

List dummy_inst_tuple_rename_list_opt =
      LPAREN dummy_inst_tuple_rename_list.l RPAREN {: return l; :}
    | {: return new List(); :}
    ;

List dummy_inst_tuple_rename_list =
      dummy_inst_tuple_rename_list.l 
      IDENTIFIER.a SIMPLERIGHTARROW IDENTIFIER.b {: return l.add(new PTDummyRename(a, b)); :}
    | IDENTIFIER.a SIMPLERIGHTARROW IDENTIFIER.b {: return new List().add(new PTDummyRename(a, b)); :}
    ;

ClassDecl adds_class = 
  CLASS IDENTIFIER ADDS class_body.b
    {: return new ClassDecl(new Modifiers(), IDENTIFIER, new Opt(), new List(), b); :};

ExprStmt explicit_merged_constructor_invocation =
    SUPER LBRACK IDENTIFIER.a RBRACK LPAREN argument_list.l? RPAREN SEMICOLON 
    {: PTMergedSuperConstructorAccess c = new PTMergedSuperConstructorAccess("super", l, a);
       //System.out.println("Fikk eksplitt merged constructor!");
       c.setStart(SUPER.getStart());
       c.setEnd(RPAREN.getEnd());
       return new ExprStmt(c); :}
    ;

Access explicit_merged_method_invocation =
     SUPER LBRACK IDENTIFIER RBRACK DOT name LPAREN argument_list.l? RPAREN
     {: SuperAccess s = new SuperAccess("super");
        s.setStart(SUPER.getStart());
        s.setEnd(SUPER.getEnd());
        MethodAccess m = new MethodAccess(IDENTIFIER, l);
        m.setStart(IDENTIFIER.getStart());
        m.setEnd(RPAREN.getEnd());
        return s.qualifiesAccess(m); :}
    ;
