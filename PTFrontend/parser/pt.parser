CompilationUnit compilation_unit =
package_declaration.p import_declarations.i? pt_declaration.pt+ {: return new PTCompilationUnit(p.getID(), i, new List<TypeDecl>(), pt); :}
| import_declarations.i? pt_declaration.pt+ {: return new PTCompilationUnit("", i, new List<TypeDecl>(), pt); :}
;

PTDecl pt_declaration =
  pt_template.t
  {: return t; :}
| pt_package.p
  {: return p; :}
;

PTDecl pt_template =
 TEMPLATE IDENTIFIER LBRACE pt_inst_decl.pt_inst* pt_simple_declaration.pt_class* RBRACE
          {: return new PTTemplate(IDENTIFIER, pt_inst, pt_class); :}
;

PTDecl pt_package =
 PACKAGE IDENTIFIER LBRACE pt_inst_decl.pt_inst+ pt_simple_declaration.pt_class* RBRACE
          {: return new PTPackage(IDENTIFIER, pt_inst, pt_class); :}
;

SimpleClass pt_simple_declaration =
  class_declaration.cd
              {: return new PTClassDecl(cd); :}
| adds_class.ac 
              {: return new PTClassAddsDecl(ac); :}
;

PTInstDecl pt_inst_decl =
  INST IDENTIFIER SEMICOLON
       {: return new PTInstDecl(IDENTIFIER, new List()); :}
| INST IDENTIFIER WITH dummy_class_list.dcl SEMICOLON
       {: return new PTInstDecl(IDENTIFIER, dcl); :}
;

List dummy_class_list =
      dummy_class_list.dcl COMMA IDENTIFIER.a RIGHTARROW IDENTIFIER.b {: return dcl.add(new PTDummyClass(a,b)); :}
    | IDENTIFIER.a RIGHTARROW IDENTIFIER.b {: return new List().add(new PTDummyClass(a,b)); :}
    ;

ClassDecl adds_class = 
  CLASS IDENTIFIER ADDS class_body.b
    {: return new ClassDecl(new Modifiers(), IDENTIFIER, new Opt(), new List(), b); :};

