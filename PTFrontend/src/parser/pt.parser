/* NB: Remember to clean/rebuild. The parser will behave strange otherwise.
*/

/* Mhp templatparametre er korrekt parsing av dette tilsynelatende (ut fra
   hvordan det er løst i JastAddJ) litt vanskelig, grunnet trøbbel med
   at f.eks. < etterfulgt av < blir <<, som er et annet token (shift).
   Dette er et kjent problem på brukernivå fra C++, men i Java må
   parseren altså tydeligvis leve med dette. Prøver derfor så langt som
   det er mulig å gjenbruke de allerede eksisterende produksjonene
   for type_arguments (aktualparametre) og type_parameters (formalparametre).
*/

/* Erfaring som kan være nyttig under debugging når man legger til
   nye type-lignende ting: JastAdd bruker konvensjonen for navnesjekking
   at hvert navn sjekker at
        extractSingleType(lookupType(this.name())) == this
   eller lignende. Dette er en sjekk for multippeldeklarasjon (det antas
   at extractSingleType er deterministisk så hvis to typer har samme navn
   i samme skop kan dette ikke holde for begge).

   Imidlertid: når man legger inn nye typer, før man har lagt inn den
   nødvendige koden for å la lookupType finne disse, vil lookupType()
   returnere null, som heller ikke er this. JastAdd vil da gi en
   forvirrende feilmelding om at noe er multippelt deklarert; problemet
   kan da altså også være at det ikke engang selv er synlig i sitt
   eget skop, selv om det har et unikt navn.

   Jastadd "finner" typedeklarasjonene som skal navnesjekkes ved å
   gå igjennom hele treet, og en trenger ikke å gjøre noe spesielt
   for at de nye typene en legger til skal finnes igjen. Derfor får
   en gjerne denne feilmeldingen når en legger til en ny type, før
   den er skikkelig implementert.
*/

CompilationUnit compilation_unit =
package_declaration.p import_declarations.i? pt_declaration.pt+ {: return new PTCompilationUnit(p.getID(), i, new List<TypeDecl>(), pt); :}
| import_declarations.i? pt_declaration.pt+ {: return new PTCompilationUnit("", i, new List<TypeDecl>(), pt); :}
;

PTDecl pt_declaration =
  pt_template.t
  {: return t; :}
| pt_package.p
  {: return p; :}
;

Modifier modifier =
    TABSTRACT {: return new Modifier("tabstract"); :}
    ;

PTDecl pt_template =
 TEMPLATE IDENTIFIER type_parameters.ps? LBRACE inst_class_or_interface_single.l+ RBRACE
          {:
                javaworld.ChildClassifier cc = new javaworld.ChildClassifier( l );
                return new PTTemplate(IDENTIFIER,
                                      cc.getInstDecls(),
                                      cc.getSimpleClasses(),
                                      cc.getInterfaces(),
                                      cc.getEnums(),
                                      cc.getRequiredTypes(),
                                      new PTDeclContext(),
                                      (ps == null) ? new AST.List<TypeVariable>() : ps );
          :}
          ;

PTDecl pt_package =
 PACKAGE IDENTIFIER LBRACE inst_class_or_interface_single.l* RBRACE
          {:
                javaworld.ChildClassifier cc = new javaworld.ChildClassifier( l );
                return new PTPackage(IDENTIFIER, cc.getInstDecls(), cc.getSimpleClasses(), cc.getInterfaces(), cc.getEnums(), cc.getRequiredTypes(), new PTDeclContext());
          :}
          ;

ASTNode inst_class_or_interface_single =
     pt_inst_decl.pt_inst {: return pt_inst; :}
   | ptr_required_spec.pt_req {: return pt_req; :}
   | class_or_interface_single.x {: return x; :}
   ;

ASTNode class_or_interface_single =
     pt_simple_declaration.pt_class {: return pt_class; :}
   | pt_intf_decl.intf_decl {: return intf_decl; :}
   | pt_adds_intf.ia_decl {: return ia_decl; :}
   | pt_enum_declaration.enum_decl {: return enum_decl; :}
   ;

PTEnumDecl pt_enum_declaration =
    // denne er muligens overflødig.. trenger vi å gjøre noe med enums?
    modifiers.m? ENUM IDENTIFIER.id interfaces.i? enum_body.b
    {: return new PTEnumDecl(new Modifiers(m), id, i, b); :}
    ;

ClassDecl pt_class_declaration =
  modifiers.m? CLASS IDENTIFIER super.s? interfaces.i? pt_class_body.b 
   {: return new ClassDecl(new Modifiers(m), IDENTIFIER, s, i, b); :}
  | modifiers.m? CLASS IDENTIFIER type_parameters.p super.s? interfaces.i? pt_class_body.b 
   {: return new GenericClassDecl(new Modifiers(m), IDENTIFIER, s, i, b, p); :}
  | modifiers.m? CLASS IDENTIFIER EXTENDS EXTERNAL class_type.c interfaces.i? pt_class_body.b 
   {: 
     Modifiers my = new Modifiers(m);
     my.addModifier( new Modifier( "extendsexternal" ) );
     return new ClassDecl(my, IDENTIFIER, new Opt(c), i, b);
   :}
  | modifiers.m? CLASS IDENTIFIER type_parameters.p EXTENDS EXTERNAL class_type.c interfaces.i? pt_class_body.b 
   {: 
     Modifiers my = new Modifiers(m);
     my.addModifier( new Modifier( "extendsexternal" ) );
     return new GenericClassDecl(my, IDENTIFIER, new Opt(c), i, b, p);
   :}
  ;

SimpleClass pt_simple_declaration =
  pt_class_declaration.cd
              {: return new PTClassDecl(cd); :}
| pt_adds_class.pt_ac 
              {: return pt_ac; :}
;


/* Does not handle all the >> token subtleties yet. TODO TODO TODO*/
List pt_type_arguments =
 LT pt_type_argument.t pt_type_rest_of_arguments.ts GT
 {: return ts.add( t ); :}
 ;

List pt_type_rest_of_arguments =
 COMMA pt_type_argument.t pt_type_rest_of_arguments.ts
 {: return ts.add( t ); :}
 |
 {: return new List(); :}
 ;

Access pt_type_argument =
 class_or_interface_type.coit
 {: return coit; // hacky
 :}
 ;

PTInstDecl pt_inst_decl =
   IDENTIFIER.name COLON INST IDENTIFIER.templateName pt_type_arguments.ts? SEMICOLON
       {:
          return new PTInstDecl(name, templateName, (ts == null) ? new List<Access>() : ts, new List(), new List());
       :}
| IDENTIFIER.name COLON INST IDENTIFIER.templateName pt_type_arguments.ts? WITH dummy_class_list.dcl SEMICOLON
       {:
          AST.List<RequiredTypeInstantiation> rtiList = new AST.List<RequiredTypeInstantiation>();
          AST.List<PTInstTuple> ptitList = new AST.List<PTInstTuple>();
          for( Object node : dcl ) {
              if( node instanceof RequiredTypeInstantiation ) {
                rtiList = rtiList.add( (RequiredTypeInstantiation) node );
              } else if( node instanceof PTInstTuple ) {
                ptitList = ptitList.add( (PTInstTuple) node );
              }
          }

          return new PTInstDecl(name, templateName, (ts == null) ? new List<Access>() : ts, ptitList, rtiList ); :}
| INST IDENTIFIER.templateName pt_type_arguments.ts? SEMICOLON
       {:
          return new PTInstDecl( "$noname$", templateName, (ts == null) ? new List<Access>() : ts, new List(), new List() );
       :}
| INST IDENTIFIER.templateName pt_type_arguments.ts? WITH dummy_class_list.dcl SEMICOLON
       {:
          AST.List<RequiredTypeInstantiation> rtiList = new AST.List<RequiredTypeInstantiation>();
          AST.List<PTInstTuple> ptitList = new AST.List<PTInstTuple>();
          for( Object node : dcl ) {
              if( node instanceof RequiredTypeInstantiation ) {
                rtiList = rtiList.add( (RequiredTypeInstantiation) node );
              } else if( node instanceof PTInstTuple ) {
                ptitList = ptitList.add( (PTInstTuple) node );
              }
          }

          return new PTInstDecl( "$noname$", templateName, (ts == null) ? new List<Access>() : ts, ptitList, rtiList );
       :}
;

List dummy_class_list =
      dummy_class_list.dcl COMMA dummy_arrow_tuple.t
      {: return dcl.concatenate(t); :}
    | dummy_arrow_tuple.t {: return t; :}
    ;

List dummy_arrow_tuple =
    reqtype_instantiation_tuple.t {: return t; :}
    | dummy_inst_tuple.t {: return new List().add( t ); :}
    ;

List reqtype_instantiation_tuple =
    | IDENTIFIER.a dummy_inst_tuple_rename_list_opt.l LTEQ type.b 
    {: return new List().add( new RequiredTypeInstantiation(a,b) ).add( new PTInstTuple( a, a, l ) ); :}
    ;

PTInstTuple dummy_inst_tuple =
    IDENTIFIER.a RIGHTARROW IDENTIFIER.b 
    dummy_inst_tuple_rename_list_opt.l
    {: return new PTInstTuple(a,b,l); :}
    ;

List dummy_inst_tuple_rename_list_opt =
      LPAREN dummy_inst_tuple_rename_list.l RPAREN {: return l; :}
    | {: return new List(); :}
    ;

List dummy_inst_tuple_rename_list =
      dummy_inst_tuple_rename_list.l 
      COMMA definition_renaming.dr {: return l.add(dr); :}
    | definition_renaming.dr {: return new List().add(dr); :}
    ;

List def_opt_rename_params =
      def_rename_params_list.l {: return l; :}
    | {: return new List(); :}
    ;

List def_rename_params_list =
      def_rename_params_list.l 
      COMMA type.t {: return l.add(t); :}
    | type.t {: return new List().add(t); :}
    ;
    

PTDummyRename definition_renaming =
        IDENTIFIER.a SIMPLERIGHTARROW IDENTIFIER.b {: return new PTFieldRename(a,b); :}
      | IDENTIFIER.a ASTERISK_PAR  SIMPLERIGHTARROW IDENTIFIER.b {: return new PTMethodRenameAll(a,b); :}        
      | IDENTIFIER.a LPAREN def_opt_rename_params.pl RPAREN  SIMPLERIGHTARROW IDENTIFIER.b {: return new PTMethodRename(a,b,pl); :}
;

// should this be missing modifiers?
PTClassAddsDecl pt_adds_class = 
  CLASS IDENTIFIER super.r_sup? interfaces.r_imp? ADDS interfaces.novel_imp? pt_class_body.b
    {: return new PTClassAddsDecl( new ClassDecl(new Modifiers(), IDENTIFIER, new Opt(), novel_imp, b), r_sup, r_imp ); :}
  ;

// same comment applies, no mods, why
PTClassAddsDecl pt_adds_class = 
  CLASS IDENTIFIER type_parameters.p super.r_sup? interfaces.r_imp?  ADDS interfaces.novel_imp?pt_class_body.b
    {: return new PTClassAddsDecl( new GenericClassDecl(new Modifiers(), IDENTIFIER, new Opt(), novel_imp, b, p), r_sup, r_imp ); :}
  ;

InterfaceDecl pt_adds_intf = 
  INTERFACE IDENTIFIER extends_interfaces.i? ADDS extends_interfaces.novel_i? interface_body.b
    {: return new PTInterfaceAddsDecl(new Modifiers(), IDENTIFIER, novel_i , b, i); :}
  | INTERFACE IDENTIFIER type_parameters.p extends_interfaces.i? ADDS extends_interfaces.novel_i? interface_body.b 
    {:  return new PTGenericInterfaceAddsDecl(new Modifiers(), IDENTIFIER, novel_i, i, b, p);  :}
  ;

InterfaceDecl pt_intf_decl =
  modifiers.m? INTERFACE IDENTIFIER extends_interfaces.i? interface_body.b {: return new PTInterfaceDecl(new Modifiers(m), IDENTIFIER, i, b); :}
  | modifiers.m? INTERFACE IDENTIFIER type_parameters.p extends_interfaces.i? interface_body.b 
    {:  return new PTGenericInterfaceDecl(new Modifiers(m), IDENTIFIER, i, b, p);  :}
  ;

Access method_invocation =  explicit_merged_method_invocation.e {: return e; :}
;

Access explicit_merged_method_invocation =
     TSUPER pt_tc_identifier.tci merged_method_name.methodName LPAREN argument_list.args? RPAREN
     {:
        if( tci.hasTemplateName() ) {
            TemplateMethodAccess m = new TemplateMethodAccess(javaworld.Util.toName( tci.getTemplateName(), tci.getTypeName(), methodName), args, tci.getTypeName(), tci.getTemplateName());
            m.setStart(TSUPER.getStart());
            m.setEnd(RPAREN.getEnd());
            return m;
        } else {
            TemplateMethodAccessShort m = new TemplateMethodAccessShort(methodName, args, tci.getTypeName(), "");
            m.setStart(TSUPER.getStart());
            m.setEnd(RPAREN.getEnd());
            return m;
        }
    :}
    ;

String merged_method_name =
      DOT IDENTIFIER {: return IDENTIFIER; :}
    ;

/* TODO: the more implicit variant T[A]() instead of T[A.C]() should be allowed,
   possibly only that one. */

PTTSuperConstructorCall explicit_tsuper_invocation =
    TSUPER pt_tc_identifier.tci LPAREN argument_list.args? RPAREN SEMICOLON
    {:
        PTTSuperConstructorCall m = new PTTSuperConstructorCall( tci, args );
        return m;
    :}
    ;
    
List pt_class_body =
    LBRACE pt_class_body_declarations.c? RBRACE    {: return c; :}
  ;

List pt_class_body_declarations =
    pt_class_body_declaration.c                           {: return new List().add(c); :}
  | pt_class_body_declarations.l pt_class_body_declaration.c {: return l.add(c); :}
  ;
BodyDecl pt_class_body_declaration =
    class_member_declaration.c                 {: return c; :}
  | instance_initializer.i                     {: return i; :}
  | static_initializer.si                      {: return si; :}
  | pt_constructor_declaration.c                  {: return c; :}
  | pt_constructor_assumption.ptcas {: return ptcas; :}
  ;

ConstructorDecl pt_constructor_declaration =
    modifiers.m? IDENTIFIER LPAREN formal_parameter_list.pl? RPAREN throws.tl? 
		LBRACE explicit_constructor_invocation.c?
               explicit_tsuper_invocations.tsc?
               block_statements.l?
        RBRACE
    {: Block b = new Block(l); l.setStart(LBRACE.getStart() + 1); b.setStart(LBRACE.getStart()); b.setEnd(RBRACE.getEnd());
       return new PTConstructorDecl(new Modifiers(m), IDENTIFIER, pl, tl, c, b, tsc); :}
 ;

List explicit_tsuper_invocations =
    explicit_tsuper_invocation.c                           {: return new List().add(c); :}
  | explicit_tsuper_invocations.l explicit_tsuper_invocation.c {: return l.add(c); :}
  ;

PTConstructorPromise pt_constructor_assumption =
    ASSUMED modifiers.m? IDENTIFIER LPAREN formal_parameter_list.pl? RPAREN throws.tl? SEMICOLON
    {:
        Modifiers ms = new Modifiers(m);
        return new PTConstructorPromise( ms, IDENTIFIER, pl, tl );
    :}
 ;

TemplateClassIdentifier pt_tc_identifier =
    LBRACK IDENTIFIER.a COLON IDENTIFIER.b RBRACK
    {: return new TemplateClassIdentifier( a, "" , b ); :}
    | LBRACK IDENTIFIER.a DOT IDENTIFIER.b RBRACK
    {: return new TemplateClassIdentifier( "", a , b ); :}
    | LBRACK IDENTIFIER.a RBRACK
    {: return new TemplateClassIdentifier( "", "" , a ); :}
 ;

RequiredType ptr_required_spec =
    REQUIRED ptr_r_type.a {: return a; :}
    | REQUIRED ptr_r_class.a {: return a; :}
    | REQUIRED ptr_r_interface.a {: return a; :}
    ;

RequiredType ptr_r_type =
    TYPE IDENTIFIER type_parameters.p? super.s? interfaces.i? LBRACE ptr_r_internal_decl.m* RBRACE
        {:
            return new RequiredType( new Modifiers(), IDENTIFIER, m, s, i, p );
        :}
    ;

RequiredInterface ptr_r_interface =
    INTERFACE IDENTIFIER type_parameters.p? extends_interfaces.i? LBRACE ptr_r_internal_decl.m* RBRACE
        {:
            return new RequiredInterface( new Modifiers(), IDENTIFIER, m, new Opt(), i, p );
        :}
    ;

RequiredClass ptr_r_class =
    CLASS IDENTIFIER type_parameters.p? super.s? interfaces.i? LBRACE ptr_r_internal_decl.m* RBRACE
        {:
            return new RequiredClass( new Modifiers(), IDENTIFIER, m, s, i, p );
        :}
    ;

BodyDecl ptr_r_internal_decl =
    abstract_method_declaration.m {: return m; :}
    | ptr_abstract_constructor.m {: return m; :} 
    ;

BodyDecl ptr_abstract_constructor =
    modifiers.m? IDENTIFIER LPAREN formal_parameter_list.pl? RPAREN throws.tl? SEMICOLON
    {: return new PTAbstractConstructor(new Modifiers(m), new PrimitiveTypeAccess("void"), IDENTIFIER, pl, tl, new Opt()); :}
    ;
