CompilationUnit compilation_unit =
package_declaration.p import_declarations.i? pt_declaration.pt+ {: return new PTCompilationUnit(p.getID(), i, new List<TypeDecl>(), pt); :}
| import_declarations.i? pt_declaration.pt+ {: return new PTCompilationUnit("", i, new List<TypeDecl>(), pt); :}
;

PTDecl pt_declaration =
  pt_template.t
  {: return t; :}
| pt_package.p
  {: return p; :}
;

PTDecl pt_template =
 TEMPLATE IDENTIFIER LBRACE inst_or_class_single.l+ RBRACE
          {:
                AST.List<SimpleClass> simpleClassList = new AST.List<SimpleClass>();
                AST.List<PTInstDecl> instDeclList = new AST.List<PTInstDecl>();

                for (int i=0; i<l.getNumChildNoTransform(); i++) {
                    ASTNode n = l.getChildNoTransform(i);
                    if (n instanceof PTInstDecl) {
                        instDeclList.add( (PTInstDecl) n);
                    }
                    else {
                        simpleClassList.add( (SimpleClass) n);
                    }
                }
                return new PTTemplate(IDENTIFIER, instDeclList, simpleClassList);
          :}
          ;

PTDecl pt_package =
 PACKAGE IDENTIFIER LBRACE inst_or_class_single.l+ RBRACE
          {:
                AST.List<SimpleClass> simpleClassList = new AST.List<SimpleClass>();
                AST.List<PTInstDecl> instDeclList = new AST.List<PTInstDecl>();

                for (int i=0; i<l.getNumChildNoTransform(); i++) {
                    ASTNode n = l.getChildNoTransform(i);
                    if (n instanceof PTInstDecl) {
                        instDeclList.add( (PTInstDecl) n);
                    }
                    else {
                        simpleClassList.add( (SimpleClass) n);
                    }
                }
                return new PTPackage(IDENTIFIER, instDeclList, simpleClassList);
          :}
          ;

ASTNode inst_or_class_single =
     pt_inst_decl.pt_inst {: return pt_inst; :}
   | pt_simple_declaration.pt_class {: return pt_class; :}
   ;


SimpleClass pt_simple_declaration =
  class_declaration.cd
              {: return new PTClassDecl(cd); :}
| adds_class.ac 
              {: return new PTClassAddsDecl(ac); :}
;

PTInstDecl pt_inst_decl =
  INST IDENTIFIER SEMICOLON
       {: return new PTInstDecl(IDENTIFIER, new List()); :}
| INST IDENTIFIER WITH dummy_class_list.dcl SEMICOLON
       {: return new PTInstDecl(IDENTIFIER, dcl); :}
;

List dummy_class_list =
      dummy_class_list.dcl COMMA dummy_inst_tuple.t {: return dcl.add(t); :}
    | dummy_inst_tuple.t {: return new List().add(t); :}
    ;

PTDummyClass dummy_inst_tuple =
    IDENTIFIER.a RIGHTARROW IDENTIFIER.b 
    dummy_inst_tuple_rename_list_opt.l
    {: return new PTDummyClass(a,b,l); :}
    ;

List dummy_inst_tuple_rename_list_opt =
      LPAREN dummy_inst_tuple_rename_list.l RPAREN {: return l; :}
    | {: return new List(); :}
    ;

List dummy_inst_tuple_rename_list =
      dummy_inst_tuple_rename_list.l 
      COMMA definition_renaming.dr {: return l.add(dr); :}
    | definition_renaming.dr {: return new List().add(dr); :}
    ;

List def_opt_rename_params =
      def_rename_params_list.l {: return l; :}
    | {: return new List(); :}
    ;

List def_rename_params_list =
      def_rename_params_list.l 
      COMMA type.t {: return l.add(t); :}
    | type.t {: return new List().add(t); :}
    ;
    

PTDummyRename definition_renaming =
        IDENTIFIER.a SIMPLERIGHTARROW IDENTIFIER.b {: return new PTFieldRename(a,b); :}
      | IDENTIFIER.a ASTERISK_PAR  SIMPLERIGHTARROW IDENTIFIER.b {: return new PTMethodRenameAll(a,b); :}        
      | IDENTIFIER.a LPAREN def_opt_rename_params.pl RPAREN  SIMPLERIGHTARROW IDENTIFIER.b {: return new PTMethodRename(a,b,pl); :}
;

ClassDecl adds_class = 
  CLASS IDENTIFIER ADDS class_body.b
    {: return new ClassDecl(new Modifiers(), IDENTIFIER, new Opt(), new List(), b); :}
  ;

Access method_invocation =  explicit_merged_method_invocation.e {: return e; :}
| explicit_merged_constructor_invocation.e {: return e; :} ;

Access explicit_merged_method_invocation =
     SUPER LBRACK IDENTIFIER.superClassName RBRACK merged_method_name.methodName LPAREN argument_list.args? RPAREN
     {:
        PTMergedMethodAccess m = new PTMergedMethodAccess(methodName, args, superClassName, "");
        m.setStart(SUPER.getStart());
        m.setEnd(RPAREN.getEnd());
        return m; :}
    ;

Access explicit_merged_method_invocation =
     SUPER LBRACK IDENTIFIER.templateName DOT IDENTIFIER.superClassName RBRACK merged_method_name.methodName LPAREN argument_list.args? RPAREN
     {:
        PTMergedMethodAccess m = new PTMergedMethodAccess(methodName, args, superClassName, templateName);
        m.setStart(SUPER.getStart());
        m.setEnd(RPAREN.getEnd());
        return m; :}
    ;

Access explicit_merged_constructor_invocation =
     SUPER LBRACK IDENTIFIER.superClassName RBRACK LPAREN argument_list.args? RPAREN
     {: 
        String mName = "super" + superClassName;
        PTMergedConstructorAccess m = new PTMergedConstructorAccess(mName, args, superClassName);
        m.setStart(SUPER.getStart());
        m.setEnd(RPAREN.getEnd());
        return m; :}
    ;

String merged_method_name =
      DOT IDENTIFIER {: return IDENTIFIER; :}
    ;
