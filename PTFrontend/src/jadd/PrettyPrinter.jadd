aspect PrettyPrint {

    eq PTTemplate.dumpString() = getClass().getName() + " [" + getID() + "]";
    eq PTPackage.dumpString() = getClass().getName() + " [" + getID() + "]";
    eq PTClassAddsDecl.dumpString() = getClass().getName() + " [" + getID() + "]";
    eq PTClassDecl.dumpString() = getClass().getName() + " [" + getID() + "]";
    eq PTInstDecl.dumpString() = getClass().getName() + " [" + getID() + "]";
    eq PTInstTuple.dumpString() = getClass().getName() + " [" + getOrgID() + " => " + getID() + "]";
    eq PTMethodRename.dumpString() = getClass().getName() + " [" + getSignature() + " -> " + getID() + "]";
    eq PTFieldRename.dumpString() = getClass().getName() + " [" + getOrgID() + " -> " + getID() + "]";    

    eq PTPackage.addsIndentationLevel() = true;
    eq PTTemplate.addsIndentationLevel() = true;

    public String PTInstDecl.getName() { return getClass().getName() + "["+getID() +"]"; }
    public String PTDecl.getName()     { return getClass().getName() + "["+getID() +"]"; }

    public void PTCompilationUnit.toString(StringBuffer sb) {
        super.toString(sb);
        for (PTDecl ptDecl: getPTDecls()) 
            ptDecl.toString(sb);
    }

    public void PTDecl.toString(StringBuffer sb) {
        sb.append(indent());
        sb.append(getDeclType() + " " + getID() + " {");
        for (PTInstDecl inst : getPTInstDecls()) {
            inst.toString(sb);
        }
        for (InterfaceDecl ptclass : getInterfaceDeclList()) {
            ptclass.toString(sb);
        }
        for (PTClassAddsDecl ptclass : getAdditionClassList()) {
            ptclass.toString(sb);        
        }
        for (ClassDecl ptclass : getClassList()) {
            ptclass.toString(sb);
        }

        sb.append(indent() + "}");
    }

    public void PTDummyRename.toString(StringBuffer sb) {
        sb.append(getSignature() + " -> " + getID());
    }

    public void List.toString(StringBuffer sb, String ifNotEmptyStart, String ifNotEmptyEnd, String separator) {
        if (getNumChild() > 0) {
            sb.append(ifNotEmptyStart);
            for (int i=0; i<getNumChild(); i++) {
                if (i!=0) {
                    sb.append(separator);
                }
                getChild(i).toString(sb);
            }
            sb.append(ifNotEmptyEnd);
        }
    }

    public void PTInstTuple.toString(StringBuffer sb) {
        sb.append(getOrgID() + " => " + getID());
        getPTDummyRenameList().toString(sb, " (", ")", ", ");
    }

    public void PTInstDecl.toString(StringBuffer sb) {
        sb.append(indent());
        sb.append("inst " + getID());
        getPTInstTupleList().toString(sb, " with ", "", ", ");
        sb.append(";");
    }

    public void PTClassAddsDecl.toString(StringBuffer s) {
        ClassDecl addClass = getClassDecl();
        s.append(indent());
        s.append("class " + addClass.getID() + " adds {");
        for(int i=0; i < addClass.getNumBodyDecl(); i++) {
            addClass.getBodyDecl(i).toString(s);
        }
        s.append(indent() + "}");
    }

    public String ASTNode.showParentsAndSelf() {
        LinkedList<ASTNode> parents = new LinkedList<ASTNode>();
        StringBuilder sb = new StringBuilder();
        ASTNode parent = getParent();
        parents.add(this);
        while (parent != null) {
            if (!(parent instanceof AST.List))
                parents.add(parent);
            parent = parent.getParent();
        }
        for (int i=0; parents.size()>0; i+=2) {
            for (int k=0; k<i; k++) { sb.append(" "); }
            sb.append( parents.removeLast().dumpString()  + "\n");
        }
        return sb.toString();
    }

    public void TabstractMethodDecl.toString(StringBuffer sb) {
        sb.append("tabstract");
        super.toString(sb);
    }

    /**
     * The name of the method that's being added to the string buffer will be an
     * altered version of the real name of the method. This is done to make the
     * output Java compilable. 
     */
    public void TemplateMethodAccess.toString(StringBuffer s) {
        String name = name();
        name = name.replace('[', '$');
        name = name.replace('.', '$');
        name = name.replace(']', '$');
        s.append(name);    
        s.append("(");
        if (getNumArg() > 0) {
            getArg(0).toString(s);
            for (int i = 1; i < getNumArg(); i++) {
                s.append(", ");
                getArg(i).toString(s);
            }
        }
        s.append(")");
    }

    /**
     * The names of tsuper methods added to the string buffer will be an altered
     * version of the real names, to make them match the names from
     * TemplateMethodAccess.toString(StringBuffer s).
     */
    refine PrettyPrint public void MethodDecl.toString(StringBuffer s) {
        s.append(indent());
        getModifiers().toString(s);
        getTypeAccess().toString(s);
        String name = name();
        if (name().matches("tsuper\\[[^\\]]*\\]\\..*")) {
            name = name.replace('[', '$');
            name = name.replace('.', '$');
            name = name.replace(']', '$');
        }
        s.append(" " + name + "(");
        if (getNumParameter() > 0) {
            getParameter(0).toString(s);
            for (int i = 1; i < getNumParameter(); i++) {
                s.append(", ");
                getParameter(i).toString(s);
            }
        }
        s.append(")");
        if (getNumException() > 0) {
            s.append(" throws ");
            getException(0).toString(s);
            for (int i = 1; i < getNumException(); i++) {
                s.append(", ");
                getException(i).toString(s);
            }
        }
        if (hasBlock()) {
            s.append(" ");
            getBlock().toString(s);
        }
        else {
            s.append(";");
        }
    }
}
