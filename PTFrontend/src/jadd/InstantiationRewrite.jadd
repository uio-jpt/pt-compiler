import javaworld.InstantiationRewriter;
import javaworld.Util;
import com.google.common.collect.Multimap;
import com.google.common.collect.Iterables;


aspect InstantiationRewrite {

    protected boolean PTDecl.isRewritten = false;
    protected boolean PTInstDecl.isRewritten = false;

    private Multimap<String,String> ClassDecl.templateClassIDTotemplateID;

    public void ClassDecl.setClassToTemplateMap(Multimap<String,String> x) {
        templateClassIDTotemplateID = x;
    }

    public String ClassDecl.lookupTemplateForTClass(String tclassID) {
        Collection<String> x = templateClassIDTotemplateID.get(tclassID);
        return Iterables.getOnlyElement(x);
    }
        

    rewrite PTInstDecl {
        when (this.isRewritten == false && templateIsRewritten())
        to PTInstDecl {
            this.isRewritten = true;
            addMissingDummyClassNodes();
            return this;
        }
    }
            
    rewrite PTDecl {
        when ( this.isRewritten == false && dependenciesAreRewritten())
        to PTDecl {
            InstantiationRewriter x = new InstantiationRewriter(this);            
            x.run();
            this.isRewritten = true;            
            return this;
        }
    }

    rewrite PTClassAddsDecl {
        when (getPTDecl().isRewritten)
        to PTClassDecl {
            PTClassDecl newClassDecl = new PTClassDecl(getClassDecl());
            return newClassDecl;
        }
    }

    rewrite TemplateMethodAccessShort {
        when (hostIsRewritten())
        to TemplateMethodAccess {
            String templateID = "";
            PTClassDecl host = (PTClassDecl) getParentClass(PTClassDecl.class);
            String methodName = getID();
            List<Expr>  argList = getArgList(); // getArgListNoTransform??
            String tClassID = getTClassID();
            try {
                templateID = host.determineTemplateID(tClassID);
            } catch(NoSuchElementException e) {
                error("Unknown template superclass for " + getID());
            } catch(IllegalArgumentException e) {
                error(String.format("Multiple possible templates with class %s for in template method call %s. msg: " + e.getMessage()));
            }
            Util.print(String.format("%s: methodName=%s, tClassID=%s, templataeID=%s",getClass().getName(),methodName,tClassID,templateID));            
            return new TemplateMethodAccess(methodName,argList, tClassID,templateID);
        }
    }

    rewrite TemplateConstructorAccessShort {
        when (hostIsRewritten())
        to TemplateConstructorAccess {
            String templateID = "";
            PTClassDecl host = (PTClassDecl) getParentClass(PTClassDecl.class);
            String methodName = getID();
            List<Expr>  argList = getArgList(); // getArgListNoTransform??
            String tClassID = getTClassID();
            try {
                templateID = host.determineTemplateID(tClassID);
            } catch(NoSuchElementException e) {
                error("Unknown template superclass for " + getID());
            } catch(IllegalArgumentException e) {
                error(String.format("Multiple possible templates with class %s for in template constructor call %s. msg: " + e.getMessage()));
            }
            Util.print(String.format("%s: methodName=%s, tClassID=%s, templataeID=%s",getClass().getName(),methodName,tClassID,templateID));
            return new TemplateConstructorAccess(methodName,argList, tClassID,templateID);
        }
    }            
    
    
    syn boolean PTMethodAccess.hostIsRewritten() = hasParentClass(PTClassDecl.class);

    syn String PTClassDecl.determineTemplateID(String tClassID) {
        return getClassDecl().lookupTemplateForTClass(tClassID);
    }
}
