import javaworld.InstantiationRewriter;
import javaworld.Util;
import com.google.common.collect.*;
import testutils.tester.Log;

/* Note that these rewrites do NOT get us all the way to pure Java.
   We end up with each package as a PTPackage node.
   CompileToPackage in the testutils performs the last step by
   transforming this node into a standard multiple-files Java package.
   This step is never reached when all we do is testing.
    -svk
*/


aspect InstantiationRewrite {

    protected boolean PTDecl.isRewritten = false;
    protected boolean PTInstDecl.isRewritten = false;

    private Multimap<String,String> ClassDecl.templateClassIDTotemplateID;

    public void ClassDecl.setClassToTemplateMap(Multimap<String,String> x) {
        templateClassIDTotemplateID = x;
    }

    public String ClassDecl.lookupTemplateForTClass(String tclassID) {
        Collection<String> x = templateClassIDTotemplateID.get(tclassID);
        return Iterables.getOnlyElement(x);
    }
        

    rewrite PTInstDecl {
        when (this.isRewritten == false && templateIsRewritten())
            // templateIsRewritten() refers to the source template of this
            // PTInstDecl and not the template that contains it, meaning
            // that PTInstDecl will be rewritten before its containing
            // template or package is rewritten.
        to PTInstDecl {
            this.isRewritten = true;
            addMissingDummyClassNodes();

            hackToEnsureRewritesAreTried();
            /* TODO _CHECK_ this.

               This is only here to fix an apparent bug in Jastadd, and it is
               a brittle solution.
               Verify whether this is really a Jastadd bug, and if so,
               fix and report. (The bug would be that some cases appear to
               slip away from the rewriting transformations.)
            */
            

            return this;
        }
    }

    public void ASTNode.hackToEnsureRewritesAreTried() {
        /* This fixes (only as far as our requirements go!) a problem
           where Jastadd seems not to keep its promises regarding
           attempting to rewrite until further rewrites are impossible.
        */

        for( Object u : getProgram().getCompilationUnitList() ) {
            if( u instanceof PTCompilationUnit ) {
                PTCompilationUnit ptu = (PTCompilationUnit) u;
                for( PTDecl ptd : ptu.getPTDecls() ) {
                    ptd.is$Final( false );
                }
            }
        }
    }
            
    rewrite PTDecl {
        when ( this.isRewritten == false && dependenciesAreRewritten())
            // dependenciesAreRewritten() refers to this template's/package's
            // PTInstDecl, which again refer to templates. So in effect it
            // means all the templates this template depends on.
        to PTDecl {
            flushCaches();
            InstantiationRewriter x = new InstantiationRewriter();            
            x.run(this);
            this.isRewritten = true;
            flushCaches();
            return this;
        }
    }

    rewrite PTClassAddsDecl {
        when (getPTDecl().isRewritten)
        to PTClassDecl {
            PTClassDecl newClassDecl = new PTClassDecl(getClassDecl());

            for( String sig : getTabstractSignatures() ) { // hax
                newClassDecl.addTabstractSignature( sig );
            }

            return newClassDecl;
        }
    }

    rewrite TemplateMethodAccessShort {
        when (hostIsRewritten())
        to TemplateMethodAccess {
            return Util.rewriteMethodAccess(this);
        }
    }

    syn boolean PTMethodAccess.hostIsRewritten() = hasParentClass(PTClassDecl.class);
}
