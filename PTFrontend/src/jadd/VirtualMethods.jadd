/*
    Det er godt mulig dette lar seg gjøre med eksisterende løsninger,
    men jeg begynte å bli litt lei av å greppe rundt. Innspill er velkomne.
    - daniero
*/

import AST.List;
import java.util.HashSet;

aspect VirtualMethods {

	/**
	 *  Lookup all MethodDecls in this class and look up their origin to
	 *  see whether they are virtual (first appearance in the current
	 *  class hierarchy) or overrides.
	 *
	 *  To look up methods' "origin", this must be done before any
	 *  rewriting occurs, then the final test happens after the merge
	 *  is otherwise finished.
	 */
	 	
	public void ClassDecl.findVirtualMethods() {
		// Oi.. For alle metoder i denne klassen må vi sjekke
		// alle metoder til alle superklasser..
		// Kanskje det hadde vært bedre å putte bodyDecls'ene i et
		// hashmap e.l.? Kunne dermed bare hentet ut de som har samme navn
		// som metoden vi i øyeblikket skal sjekke. Burde være en god del kjappere.

		for (BodyDecl d: getBodyDecls()) { // the infamous getMethodDecls hack:
			if (d instanceof MethodDecl) {
				MethodDecl myMeth = (MethodDecl)d;
				ClassDecl c = superclass();

				wh: while (c != null) {
				/* Søker atm ALLE superklasser, helt opp til Object;
				   Bør/trenger vel bare søke opp til det øverste som er innen
				   vår package/template?  
				   F.eks bør vel toString() settes som "virtuell" hvis det er første
				   gang (øverst i klassehierarkiet) i denne P/T'en den blir deklarert,
				   selv om den også er definert i Object. */
					for (BodyDecl bd: c.getBodyDecls()) { 
						if (bd instanceof MethodDecl) { 
							MethodDecl superMeth = (MethodDecl)bd; 
							if (myMeth.sameSignature(superMeth))
								break wh;
						}
					}
					c = c.superclass();
				}
				
				if (c == null) // fant ingen supermetode
					myMeth.isVirtual = true;
				
				// addMethod(myMeth.signature()); // funker ikke atm
			}
		}

	}

	public boolean MethodDecl.isVirtual; // first time defined [in this package/template]?

	//public boolean ClassDecl.wasRewrittenToAddsClass;

	///
	// De fire neste greiene fikk jeg ikke bruk for allikevel, siden det holder å
	// sjekke på kun virtuelle metoder i SimpleClassRew:
	///

	/**
	 *  Indicate that this method overrides an existing method from a
	 *  superclass (duh).
	 */
	// public void MethodDecl.setOverrides() {
	// 	overrides = true;
	// 	virtual = false;
	// }

	/**
	 * Indicate that this method is virtual.
	 */
	// public void MethodDecl.setVirtual() {
	// 	overrides = false;
	// 	virtual = true;
	// }

	/**
	 * Has a containing class visited this method through 
	 * ClassDecl.setMethodsOrigin()?
	 * (false for minit* methods etc)
	 */
	// public boolean MethodDecl.OriginIsChecked() {
	// 	return overrides ^ virtual;
	// }

	// public boolean MethodDecl.overrides; // Does this method override another?


	///
	// Følgende hadde vært fint å ha med, men atm virker det ikke som classdecl
	// "husker" metodene sine når den kommer til SimpleClassRew, så jeg bruker
	// ikke dette ennå:
	///

	/**
	 * A Set to lookup if this class has a certain method.
	 * The keys are signature strings.
	 */
	// public HashSet<String> ClassDecl.methods;

	// public void ClassDecl.addMethod(String signature) {
	// 	if (methods == null) 
	// 		methods = new HashSet<String>();
	// 	methods.add(signature);
	// }

	/**
	 * Checks if a method with the given signature exists in this class or any
	 * of its superclasses.
	 * (Similar method may allready exist(?))
	 */
	// public boolean ClassDecl.hasMethod(String signature) {
	// 	if (methods != null && methods.contains(signature)) 
	// 		return true;
	// 	else
	// 		return superclass() != null && superclass().hasMethod(signature);
	// }	

}
