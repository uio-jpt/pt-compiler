PTCompilationUnit : CompilationUnit ::= PTDecl*;

abstract PTDecl ::= <ID> PTInstDecl* SimpleClass* InterfaceDecl* PTEnumDecl* RequiredType* PTDeclContext;
PTTemplate : PTDecl ::= TypeParameter:TypeVariable*;
PTPackage : PTDecl;

PTDeclContext;

abstract SimpleClass ::= ClassDecl;
PTClassDecl : SimpleClass;
PTClassAddsDecl : SimpleClass ::= [RedundantSuperclass:Access] RedundantImplements:Access*;

PTInterfaceDecl : InterfaceDecl;
PTGenericInterfaceDecl : GenericInterfaceDecl;
PTInterfaceAddsDecl : PTInterfaceDecl ::= RedundantExtends:Access*;
PTGenericInterfaceAddsDecl : PTGenericInterfaceDecl ::= RedundantExtends:Access*;

PTEnumDecl : EnumDecl;

TemplateClassIdentifier ::= <InstantiationName:String> <TemplateName:String> <TypeName:String>;

PTInstDecl ::= <InstantiationName:String> <ID> TypeArgument:Access* PTInstTuple* RequiredTypeInstantiation*;
// inst T<...> with A => X;
//      ID  typevariables   PTInstTuple

RequiredTypeInstantiation ::= <RequiredTypeName> ConcreteTypeAccess:Access;

PTInstTuple ::= <OrgID> <ID> PTDummyRename*;

PTTSuperConstructorCall ::= TemplateClassIdentifier Arg:Expr*;
PTConstructorDecl : ConstructorDecl ::= TSuperConstructorInvocation:PTTSuperConstructorCall*;

PTConstructorPromise : BodyDecl ::= Modifiers <ID:String> Parameter:ParameterDeclaration* Exception:Access*;

abstract PTDummyRename ::= <OrgID> <ID>;
PTMethodRename : PTDummyRename ::= Access*;
PTMethodRenameAll : PTDummyRename;
PTFieldRename : PTDummyRename;

abstract PTMethodAccess : MethodAccess;

// e.g. tsuper[<templateName>.<ClassName>].f()
TemplateMethodAccess : PTMethodAccess ::= <TClassID> <TemplateID>;
// e.g. tsuper[<ClassName>].f()
// will be converted to superType if unambigous
TemplateMethodAccessShort : TemplateMethodAccess;

// The template constructors call chain is generated and it's not legal or
// possible for the end user to call those constructors/methods
TemplateConstructorAccess : PTMethodAccess ::= <TClassID> <TemplateID>;

/* A constructor defined in a template will be transformed to a 
 * method of type TemplateConstructor when it is instantiated.
 */
TemplateConstructor : MethodDecl ::= <TClassID> <TemplateID>;

/* Constructors of a class in a package will be transformed to this type.
 * PackageConstructors acceps arguments as opposed to TemplateConstructor.
 */
PackageConstructor : MethodDecl ::= <TClassID> <TemplateID>;

/* Type that marks a method as tabstract.
 */ 
TabstractMethodDecl : MethodDecl;

RequiredType : ReferenceType ::= [SuperTypeAccess:Access] Implements:Access* TypeParameter:TypeVariable*;
RequiredClass : RequiredType;
RequiredInterface : RequiredType;


// PTAbstractConstructor : BodyDecl ::= Modifiers <ID:String> Parameter:ParameterDeclaration* Exception:Access*;
PTAbstractConstructor : MethodDecl;
// inherits from methoddecl instead of constructordecl to avoid rewrites e.g. inserting super()
// required since Java has no concept of an abstract constructor
