import testutils.utils.CriticalPTException;
aspect ReferenceAttributes {

    syn PTTemplate PTInstDecl.getTemplate() {
        PTTemplate ans = getTemplate(getID());
        if (ans != null)
            return ans;
        // System.out.println( "getting template " + getID() + " FAILED" );
        error(String.format("Instantiation of non-existing template %s.",getID()));

         throw new CriticalPTException("Could not find template " + getID());
    }
    syn PTTemplate PTInstTuple.getTemplate() = getInstDecl().getTemplate();
    inh PTTemplate PTInstDecl.getTemplate(String name);
    inh PTInstDecl PTInstTuple.getInstDecl();
    inh PTTemplate CompilationUnit.lookupTemplateGlobal(String name);
    inh PTDecl PTDecl.lookupPTDecl(String name);
    inh boolean PTDecl.hasImportDecl(ImportDecl id);

    public void ASTNode.addPTDeclDependenciesFrom( java.util.Set<PTDecl> rv ) {
        for(int i=0;i<getNumChild();i++) {
            getChild(i).addPTDeclDependenciesFrom( rv );
        }
    }

    public void TypeAccess.addPTDeclDependenciesFrom( java.util.Set<PTDecl> rv ) {
        String pName = packageName();
        PTDecl parentPtDecl = (PTDecl) getParentClass( PTDecl.class );
        if( parentPtDecl != null ) {
            PTDecl dependency = parentPtDecl.lookupPTDecl( pName );
            if( dependency != null ) {
                rv.add( dependency );
            }
        }
    }


    syn SimpleClass PTDecl.getSimpleClass(String name) {
        for (SimpleClass sc : getSimpleClasss()) 
            if (sc.getClassDecl().getID().equals(name))
                return sc;
        return null;
    }

    syn String ClassDecl.getTopMostInternalSuperName() {
        if( !isPtInternalClass() ) {
            return null;
        }
        ClassDecl superclass = superclass();
        if( !superclass.isPtInternalClass() ) {
            return getID();
        }
        return superclass.getTopMostInternalSuperName();
    }

    eq PTCompilationUnit.getPTDecl(int i).hasImportDecl(ImportDecl id) {
        /* The try/catches here reflect that sometimes (before a rewrite,
           which does not happen presumably because of some sort of funky
           circularity, the JastaddJ method ImportDecl.toString() will
           simply crash (because PackageOrAccess.toString() is not
           implemented).

           We assume (which is not strictly warranted) that these crashy
           import declarations do not collide.

           Long-term there must surely be better ways of checking for
           ImportDecl collisions than using .toString(), which is
           a pretty-printing method.
        */
        String name = null;
        name = id.dumpString();

        for (ImportDecl decl : getImportDeclList()) {
            try {
                if (name.equals(decl.dumpString())) {
                    return true;
                }
            }
            catch( Exception e ) {
            }
        }
        return false;
    }
    
    eq PTCompilationUnit.getPTDecl(int i).lookupPTDecl(String name) {
        for (PTDecl decl : getPTDeclList())
            if (name.equals(decl.getID()))
                return decl;
        return null;
    }

    eq PTInstDecl.getPTInstTuple(int i).getInstDecl() = this;

    eq PTCompilationUnit.getPTDecl(int i).getTemplate(String name) {
        PTTemplate res = lookupTemplateLocal(name);
        if (res==null) return lookupTemplateGlobal(name);
        else return res;
    }

    eq Program.getCompilationUnit(int i).lookupTemplateGlobal(String name) {
        for (CompilationUnit cu : getCompilationUnits()) {
            if (cu.lookupTemplateLocal(name)!=null) {
                return cu.lookupTemplateLocal(name);
            }
        }
        return null;
    }

    syn PTTemplate CompilationUnit.lookupTemplateLocal(String name) = null;

    eq PTCompilationUnit.lookupTemplateLocal(String name) {
        for (PTDecl decl: getPTDecls()) {
            PTTemplate template = decl.lookupTemplate(name);
            if (template != null) {
                return template;
            }
        }
        return null;
    }

    syn Map<String,String> PTInstDecl.getRenamedClasses() {
        // note this name is now misleading; the entities renamed can be
        // many things other than classes (interfaces, required types,
        // required classes, ..)

        Map<String,String> renamedClasses = new HashMap<String,String>();
        for (PTInstTuple instTuple: getPTInstTupleList()) 
            renamedClasses.put(instTuple.getOrgID(),instTuple.getID());
        return renamedClasses; 
    }

    syn boolean PTInstDecl.templateIsRewritten() {
        PTTemplate template = getTemplate();
        if( template == null ) {
            error("Nonexisting template " + getID() + "\n");
            return true;
        }
        return template.isRewritten;
    }

    syn boolean PTDecl.dependenciesAreRewritten() {
        for (PTInstDecl templateInst : getPTInstDecls()) {
            if (!templateInst.isRewritten) {
                return false;
            }
        }

        java.util.Set<PTDecl> rv = new java.util.LinkedHashSet<PTDecl>();
        addPTDeclDependenciesFrom( rv );
        if( rv.contains( this ) ) {
            rv.remove( this );
        }

        for(PTDecl ptd : rv ) {
            System.out.print( ptd.getID() + " " );
        }
        // System.out.println();

        for(PTDecl ptd : rv ) {
            if( !ptd.isRewritten ) {
                return false;
            }
        }

        return true;
    }

    syn Set<String> ConstructorDecl.getMergedClassesWithConstructors() =
        getClassDecl().getMergedClassesWithConstructors();

    syn ClassDecl BodyDecl.getClassDecl() = ((ClassDecl)getParentClass(ClassDecl.class));

    coll Set<String> ClassDecl.getMergedClassesWithConstructors() [new HashSet<String>()]
        with add root ClassDecl;
    TemplateConstructor contributes getTClassID() to ClassDecl.getMergedClassesWithConstructors() for getClassDecl();    
    
    coll Set<PTPackage> CompilationUnit.getPTPackages() [new LinkedHashSet<PTPackage>()]
        with add root CompilationUnit;
    PTPackage contributes this to CompilationUnit.getPTPackages() for getCompilationUnit();

    

    inh CompilationUnit PTDecl.getCompilationUnit();
    eq PTCompilationUnit.getPTDecl(int i).getCompilationUnit() = this;

    syn boolean TemplateConstructor.hasNoParameter() = getNumParameter() == 0;

    coll Set<String> PTDecl.visibleTemplateNames() [new HashSet<String>()] with add root PTDecl;

    PTInstDecl contributes getID() to PTDecl.visibleTemplateNames() for getPTDecl();

    inh PTDecl PTInstDecl.getPTDecl();
    inh PTDecl TemplateMethodAccess.getPTDecl();
    eq PTDecl.getChild(int i).getPTDecl() = this;
    /* Look for a PTDecl in the tree, and return it, if found. */
    eq ASTNode.getChild(int i).getPTDecl() {
        return (PTDecl)getParentClass(PTDecl.class);
    }

    coll Set<VarAccess> FieldDeclaration.fieldAccess()
        [new LinkedHashSet<VarAccess>()] with add root ClassDecl;

    VarAccess contributes this 
        when (decl() instanceof FieldDeclaration)
        to FieldDeclaration.fieldAccess()
        for ((FieldDeclaration) decl());

    coll Set<MethodAccess> MethodDecl.methodAccess()
//        [new LinkedHashSet<MethodAccess>()] with add root ClassDecl;
        [new LinkedHashSet<MethodAccess>()] with add root TypeDecl;

    MethodAccess contributes this 
        to MethodDecl.methodAccess()
        for ((MethodDecl) decl());


    //
    public java.util.Map<String, PTTemplate> PTDecl.getInstantiatedTemplatesMap() {
        java.util.Map<String,PTTemplate> rv = new java.util.HashMap<String,PTTemplate>();
        for( PTInstDecl ptid : getPTInstDeclList() ) {
            PTTemplate template = ptid.getTemplate( ptid.getID() );
            if( template != null ) {
                rv.put( ptid.getID(), template );
            }
        }
        return rv;
    }

    public java.util.List<ASTNode> PTDecl.getTemplateDeclarationsMergedTo(String name) {
        java.util.ArrayList<ASTNode> rv = new java.util.ArrayList<ASTNode>();
        for( PTInstDecl ptid : getPTInstDeclList() ) {
            for( PTInstTuple ptit : ptid.getPTInstTupleList() ) {
                if( name.equals( ptit.getID() ) ) {
                    String declID = ptit.getOrgID();
                    PTTemplate template = ptid.getTemplate();
                    if( template == null ) continue;
                    SimpleSet decls = template.ptLookupTypeIn( declID );
                    if( decls.size() == 1 ) { // otherwise, compilation error, but we should nevertheless not crash
                        rv.add( (ASTNode) decls.iterator().next() );
                    }
                }
            }
        }
        return rv;
    }

}
