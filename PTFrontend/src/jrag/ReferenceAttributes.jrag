 import javaworld.PTDeclRew;
aspect ReferenceAttributes {
    
    syn PTTemplate PTInstDecl.getTemplate() = getTemplate(getID());
    syn PTTemplate PTDummyClass.getTemplate() = getInstDecl().getTemplate();
    inh PTTemplate PTInstDecl.getTemplate(String name);
    inh PTInstDecl PTDummyClass.getInstDecl();
    inh PTTemplate CompilationUnit.lookupTemplateGlobal(String name);
    inh PTDecl PTDecl.lookupPTDecl(String name);
    inh boolean PTDecl.hasImportDecl(String name);


    eq PTCompilationUnit.getPTDecl(int i).hasImportDecl(String name) {
        for (ImportDecl decl : getImportDeclList())
            if (name.equals(decl.toString()))
                return true;
        return false;
    }
    
    eq PTCompilationUnit.getPTDecl(int i).lookupPTDecl(String name) {
        for (PTDecl decl : getPTDeclList())
            if (name.equals(decl.getID()))
                return decl;
        return null;
    }

    eq PTInstDecl.getPTDummyClass(int i).getInstDecl() = this;

    eq PTCompilationUnit.getPTDecl(int i).getTemplate(String name) {
        PTTemplate res = lookupTemplateLocal(name);
        if (res==null) return lookupTemplateGlobal(name);
        else return res;
    }

    eq Program.getCompilationUnit(int i).lookupTemplateGlobal(String name) {
        for (CompilationUnit cu : getCompilationUnits()) {
            if (cu.lookupTemplateLocal(name)!=null)
                return cu.lookupTemplateLocal(name);
        }
        return null;
    }

    syn PTTemplate CompilationUnit.lookupTemplateLocal(String name) = null;

    eq PTCompilationUnit.lookupTemplateLocal(String name) {
        for (PTDecl decl: getPTDecls()) {
            PTTemplate template = decl.lookupTemplate(name);
            if (template != null) {
                return template;
            }
        }
        return null;
    }

    syn Map<String,String> PTInstDecl.getRenamedClasses() {
        Map<String,String> renamedClasses = new HashMap<String,String>();
        for (PTDummyClass dummy: getPTDummyClassList()) 
            renamedClasses.put(dummy.getOrgID(),dummy.getID());
        return renamedClasses; 
    }

    syn boolean PTInstDecl.templateIsRewritten() {
        try {
            return getTemplate().isRewritten;
        } catch (NullPointerException e) {
            error("Nonexisting template " + getID() + "\n");
            return true;
        }
    }
    
    syn boolean PTDecl.dependenciesAreRewritten() {
        for (PTInstDecl templateInst : getPTInstDecls()) 
            if (!templateInst.isRewritten)
                return false;
        return true;
    }

    syn Set<String> ConstructorDecl.getMergedClassesWithConstructors() =
        getClassDecl().getMergedClassesWithConstructors();

    syn ClassDecl BodyDecl.getClassDecl() = ((ClassDecl)getParentClass(ClassDecl.class));

    coll Set<String> ClassDecl.getMergedClassesWithConstructors() [new HashSet<String>()]
        with add root ClassDecl;
    TemplateConstructor contributes getTClassID() to ClassDecl.getMergedClassesWithConstructors() for getClassDecl();    
    
    coll Set<String> ConstructorDecl.getMergedSuperCallNames() [new HashSet<String>()]
        with add root ClassDecl;
    TemplateConstructorAccess contributes getTClassID() to ConstructorDecl.getMergedSuperCallNames()
        for getConstructorDecl();

    coll Set<PTPackage> CompilationUnit.getPTPackages() [new HashSet<PTPackage>()]
        with add root CompilationUnit;
    PTPackage contributes this to CompilationUnit.getPTPackages() for getCompilationUnit();

    coll Collection<TemplateConstructorAccess> ConstructorDecl.getTemplateConstructorAccesses() [new LinkedList<TemplateConstructorAccess>()]
        with add root ClassDecl;
    TemplateConstructorAccess contributes this to ConstructorDecl.getTemplateConstructorAccesses()
        for getConstructorDecl();

    coll Collection<TemplateConstructor> ClassDecl.getTemplateConstructors() [new LinkedList<TemplateConstructor>()]
        with add root ClassDecl;
    TemplateConstructor contributes this to ClassDecl.getTemplateConstructors()
        for getClassDecl();
    

    inh CompilationUnit PTDecl.getCompilationUnit();
    eq PTCompilationUnit.getPTDecl(int i).getCompilationUnit() = this;

    syn ConstructorDecl TemplateConstructorAccess.getConstructorDecl() = ((ConstructorDecl)
                                                                     getParentClass(ConstructorDecl.class));

    syn boolean TemplateConstructor.hasNoParameter() = getNumParameter() == 0;
}
