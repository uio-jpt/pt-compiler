aspect RequiredTypes {
  public void ASTNode.replaceTypeAccesses(Map<TypeDecl,Access> ht) {
        for(int i = 0; i < getNumChild(); i++) {
            ASTNode child = getChild(i);
            ASTNode swapWith = child.visitReplaceTypeAccesses(ht);
            if ( swapWith != null ) {
                child.replaceSelfWith( swapWith.fullCopy() );
            }
            getChild(i).replaceTypeAccesses(ht);
        }
  }

  public boolean ASTNode.isRequiredAdds() {
    return false;
  }
  public boolean RequiredTypeAdds.isRequiredAdds() {
    return true;
  }
  public boolean RequiredClassAdds.isRequiredadds() {
    return true;
  }
  public boolean RequiredInterfaceAdds.isRequiredadds() {
    return true;
  }


  public ASTNode ASTNode.visitReplaceTypeAccesses(Map<TypeDecl,Access> ht) {
    return null;
  }

  public ASTNode TypeAccess.visitReplaceTypeAccesses(Map<TypeDecl,Access> ht) {
    // it's fine to call decl() when there's no decl.
    // note however that it does NOT return null, but "unknown"
    TypeDecl myDecl = decl();
    Access rv = ht.get( myDecl );

    // do-what-I-mean hack
    if( rv == null && myDecl.isUnknown() ) {
        for( TypeDecl theirDecl : ht.keySet() ) {
            if( theirDecl.getID().equals( getID() ) ) {
                rv = ht.get( theirDecl );
            }
        }
    }

    return rv;
  }

  public boolean RequiredType.isObject() {
      // not called?
      return true;
  }

  public TypeConstraint RequiredType.getTypeConstraint( ConcretificationScheme scheme ) {
      TypeConstraint rv = new TypeConstraint();

      System.out.println( "making required type constraint -- origin of asymmetry?" );

      if( this instanceof RequiredClass ) {
          System.out.println( "requiring class" );
          rv.requireClass();
      }
      if( this instanceof RequiredInterface ) {
          System.out.println( "requiring interface" );
          rv.requireInterface();
      }

      if( hasSuperTypeAccess() ) {
          System.out.println( "adding STA" );
          rv.addSuperType( new JastaddTypeDescriptor( getSuperTypeAccess() ) );
      }

      for( Access a : getImplementsList() ) {
          TypeAccess ta = (TypeAccess) a;
          TypeDecl td = ta.decl();
          System.out.println( "adding implements :: " + td.getID() );

          rv.addImplementedType( new JastaddTypeDescriptor( td ) );
      }

        for( TypeVariable a : getTypeParameterList() ) {
            System.out.println( "adding TV :: " + a.dumpTree() );
            rv.addTypeParameter( new JastaddTypeParameterDescriptor( a ) );
        }


      for( BodyDecl bd : getBodyDecls() ) {
          System.out.println( "adding from bodyDecl :: " + bd.dumpTree() );
          JastaddTypeConstraints.fromRequiredTypeBodyDeclInto( bd, rv, scheme );
      }

      System.out.println( "constructed " + rv );

      return rv;
  }

  public TypeDecl RequiredType.getDirectSupertype() {
      if( ! hasSuperTypeAccess() ) {
      /* Missing manual comment (or perhaps it's there somewhere): typeObject()
         returns the literal type "java.lang.Object". */
          return typeObject();
      }
      Access a = getSuperTypeAccess();
      TypeDecl td = Util.declarationFromTypeAccess( a );

      return td;
  }

  public boolean RequiredType.subtype( TypeDecl that ) {
    return instanceOf( that );
  }

  public boolean RequiredType.instanceOf( TypeDecl that ) {
      List<Access> ifaces = getImplementsList();
      if( this == that ) {
          return true;
      }
      for( Access a : ifaces ) {
            TypeDecl td = Util.declarationFromTypeAccess( a );
            if( td.instanceOf( that ) ) {
                return true;
            }
      }
      boolean rv = ( getDirectSupertype().instanceOf( that ) );
      return rv;
  }

  public boolean BodyDecl.isInRequiredType() {
    return getParentClass( RequiredType.class ) != null;
  }


  rewrite PTAbstractConstructor {
      when ( getID().equals("$UNNAMED-CONSTRUCTOR$") )
      to PTAbstractConstructor {
          RequiredType parent = (RequiredType) getParentClass( RequiredType.class );
          if( parent == null ) {
              setID( "$INVALID$" ); // oops
          } else {
              setID( parent.getID() );
          }

          return this;
      }
  }


    /* What's the proper way to do this (i.e. how is it done in J.a.J. for interfaces?
       Not trivial to figure out so this works for now. */
  rewrite 
    MethodDecl 
    {
        when ( isInRequiredType() && !isAbstract() )
        to MethodDecl
      {
            getModifiers().addModifier( new Modifier( "abstract" ) );
            return this;
      }
    }

    eq RequiredType.methodsSignatureMap() {
        HashMap map = new HashMap( localMethodsSignatureMap() );

        TypeDecl superType;
        if( hasSuperTypeAccess() ) {
            superType = Util.declarationFromTypeAccess( getSuperTypeAccess() );
        } else {
            superType = typeObject();
        }

        if( superType != null ) {
              for(Iterator iter = superType.methodsIterator(); iter.hasNext(); ) {
                MethodDecl m = (MethodDecl)iter.next();
                if(!m.isPrivate() && m.accessibleFrom(this) && !localMethodsSignatureMap().containsKey(m.signature()))
                  putSimpleSetElement(map, m.signature(), m);
              }
        }

        for( Access a : getImplementsList() ) {
            TypeAccess ta = (TypeAccess) a;
            TypeDecl td = ta.decl();
            if( td == null ) continue;

            // this should be either a RequiredType (RequiredInterface) or
            // a real interface

      for(Iterator iter = td.methodsIterator(); iter.hasNext(); ) {
        MethodDecl m = (MethodDecl)iter.next();
        if(!m.isPrivate() && m.accessibleFrom(this) && !localMethodsSignatureMap().containsKey(m.signature()))
          putSimpleSetElement(map, m.signature(), m);
      }


        }

        return map;
    }


    // the equivalents for JastaddJ are in SyntacticClassification.jrag
    eq RequiredType.getSuperTypeAccess().nameType() = NameType.TYPE_NAME;
    eq RequiredType.getImplements().nameType() = NameType.TYPE_NAME;
    eq RequiredTypeInstantiation.getConcreteTypeAccess().nameType() = NameType.TYPE_NAME;

    public void PTAbstractConstructor.nameCheck() {
        super.nameCheck();

        RequiredType reqtype = (RequiredType) getParentClass( RequiredType.class );
        if( reqtype != null ) {
            if( ! reqtype.getID().equals( getID() ) ) {
                error( "defining abstract constructor of conflicting name " + getID() + " in required type " + reqtype.getID() );
            }

            if( ! (reqtype instanceof RequiredClass) ) {
                error( "defining abstract constructor in required non-class (type or interface)" );
            }
        } else {
            error( "required type-abstract constructor outside required type (impossible)" );
        }
    }

    public Access RequiredType.getSuperTypeAccessOrNull() {
        return hasSuperTypeAccess() ? getSuperTypeAccess() : null;
    }

    public boolean RequiredType.isExtendsCircular() {
        // circularity not in the RT part will be detected by JaJ
        Set<RequiredType> extendedRTs = new LinkedHashSet<RequiredType>() ;
        Access nextSuper = getSuperTypeAccessOrNull();
        extendedRTs.add( this );
        while( nextSuper != null ) {
            TypeDecl decl = Util.declarationFromTypeAccess( nextSuper );
            if( !(decl instanceof RequiredType) ) break;
            if( extendedRTs.contains( decl ) ) {
                return true;
            }
            extendedRTs.add( (RequiredType) decl );

            nextSuper = ((RequiredType) decl).getSuperTypeAccessOrNull();
        }
        return false;
    }

    public boolean RequiredType.isLocallyImplementsCircular( Set<RequiredType> forbidden ) {
        for( RequiredType rt : getImplementedRequiredTypes() ) {
            if( forbidden.contains( rt ) ) {
                return true;
            }

            Set<RequiredType> newForbidden = new java.util.LinkedHashSet<RequiredType> ( forbidden );
            newForbidden.add( rt );
            
            if( rt.isLocallyImplementsCircular( newForbidden ) ) {
                return true;
            }
        }
        return false;
    }

    public boolean RequiredType.isImplementsCircular() {
        // circularity not in the RT part will be detected by JaJ
        Set<RequiredType> extendedRTs = new LinkedHashSet<RequiredType>() ;
        extendedRTs.add( this );
        return isLocallyImplementsCircular( extendedRTs );
    }

    public java.util.List<RequiredType> RequiredType.getImplementedRequiredTypes() {
        java.util.List<RequiredType> rv = new java.util.ArrayList<RequiredType>();
        for( Access a : getImplementsList() ) {
            TypeDecl d = Util.declarationFromTypeAccess( a );
            if( d != null ) {
                if( d instanceof RequiredType ) {
                    rv.add( (RequiredType) d );
                }
            }
        }
        return rv;
    }

    public void RequiredTypeAdds.nameCheck() {
    }

    public void RequiredInterfaceAdds.nameCheck() {
    }

    public void RequiredClassAdds.nameCheck() {
    }

    public void RequiredType.typeCheck() {
        super.typeCheck();

        if( ! (this instanceof RequiredClass) ) {
            TypeDecl superType;
            if( hasSuperTypeAccess() ) {
                superType = Util.declarationFromTypeAccess( getSuperTypeAccess() );
            } else {
                superType = null;
            }
            if( superType instanceof ClassDecl ) {
                boolean isObject = superType == typeObject(); // temporary exception for EXPLICIT extends object which has been used as workaround
                if( !isObject ) {
                    error( "required type (non-class) " + getID() + " cannot extend class " + superType.getID() );
                } else {
                    System.out.println( "required type (non-class) " + getID() + " should not explicitly extend Object" );
                }
            }
        }
    }

    public void RequiredType.nameCheck() {
        super.nameCheck();

        if( isExtendsCircular() ) {
            error( "required type " + getID() + " has circular extends chain" );
        }

        if( isImplementsCircular() ) {
            error( "required type " + getID() + " has circular implements chain" );
        }
    }

    public String RequiredType.toString() {
        return "[required type " + getID() + "]";
    }

    public boolean ASTNode.isRequiredClass() { return false; }
    public boolean ASTNode.isRequiredInterface() { return false; }
    public boolean RequiredClass.isRequiredClass() { return true; }
    public boolean RequiredInterface.isRequiredInterface() { return true; }
    
    refine TypeHierarchyCheck
  public void ClassDecl.nameCheck() {
    super.nameCheck();
    if(hasSuperClassAccess() && ( !getSuperClassAccess().type().isClassDecl()
                                  && !getSuperClassAccess().type().isRequiredClass() ) )
      error("class may only inherit a class and not " + getSuperClassAccess().type().typeName());
    if(isObject() && hasSuperClassAccess())
      error("class Object may not have superclass");
    if(isObject() && getNumImplements() != 0)
      error("class Object may not implement interfaces");
    
    // 8.1.3
    if(isCircular())
      error("circular inheritance dependency in " + typeName()); 
      
    // 8.1.4
    HashSet set = new HashSet();
    for(int i = 0; i < getNumImplements(); i++) {
      TypeDecl decl = getImplements(i).type();
      if(!decl.isInterfaceDecl() && !decl.isUnknown() && !decl.isRequiredInterface() )
        error("type " + fullName() + " tries to implement non interface type " + decl.fullName());
      if(set.contains(decl))
        error("type " + decl.fullName() + " mentionened multiple times in implements clause");
      set.add(decl);
    }

    for(Iterator iter = interfacesMethodsIterator(); iter.hasNext(); ) {
      MethodDecl m = (MethodDecl)iter.next();
      if(localMethodsSignature(m.signature()).isEmpty()) {
        SimpleSet s = superclass().methodsSignature(m.signature());
        for(Iterator i2 = s.iterator(); i2.hasNext(); ) {
          MethodDecl n = (MethodDecl)i2.next();
          if(n.accessibleFrom(this)) {
            interfaceMethodCompatibleWithInherited(m, n);
          }
        }
        if(s.isEmpty()) {
          for(Iterator i2 = interfacesMethodsSignature(m.signature()).iterator(); i2.hasNext(); ) {
            MethodDecl n = (MethodDecl)i2.next();
            if(!n.mayOverrideReturn(m) && !m.mayOverrideReturn(n))
              error("Xthe return type of method " + m.signature() + " in " + m.hostType().typeName() + 
                  " does not match the return type of method " + n.signature() + " in " + 
                  n.hostType().typeName() + " and may thus not be overriden");
          }
        }
      }
    }
  }
  

  eq RequiredType.getTypeParameter().isNestedType() = true;
  eq RequiredType.getTypeParameter().enclosingType() = this;

  public SimpleSet RequiredType.addTypeVariables(SimpleSet c, String name) {
    for(int i=0;i< getNumTypeParameter(); i++) {
        TypeVariable p = getTypeParameter(i);
        if( p.name().equals( name ) ) {
            c = c.add(p);
        }
    }
    return c;
  }

  eq RequiredType.getSuperTypeAccess().lookupType(String name) {
    SimpleSet c = addTypeVariables(SimpleSet.emptySet, name);
    return !c.isEmpty() ? c : lookupType(name);
  }

  eq RequiredType.getImplements().lookupType(String name) {
    SimpleSet c = addTypeVariables(SimpleSet.emptySet, name);
    return !c.isEmpty() ? c : lookupType(name);
  }

  eq RequiredType.getTypeParameter().lookupType(String name) {
    SimpleSet c = memberTypes(name);
    c = addTypeVariables(c, name);
    if(!c.isEmpty()) return c;
    // 8.5.2
    if(isClassDecl() && isStatic() && !isTopLevelType()) {
      for(Iterator iter = lookupType(name).iterator(); iter.hasNext(); ) {
        TypeDecl d = (TypeDecl)iter.next();
        if(d.isStatic() || (d.enclosingType() != null && instanceOf(d.enclosingType()))) {
          c = c.add(d);
        }
      }
    }
    else
      c = lookupType(name);
    if(!c.isEmpty())
      return c;
    return topLevelType().lookupType(name); // Fix to search imports
  }

  eq RequiredType.getBodyDecl(int index).lookupType(String name) {
    // NOTE: it's NOT safe to call getBodyDecl(index) here, 
    // presumably because we're mutating the RequiredType so heavily.
    
    SimpleSet c = memberTypes(name);

    //    if(getBodyDecl(index).visibleTypeParameters())
    boolean staticContext = false;
    if( !staticContext ) {
      c = addTypeVariables(c, name);
    }

    if(!c.isEmpty())
      return c;
    // 8.5.2
    if(isClassDecl() && isStatic() && !isTopLevelType()) {
      for(Iterator iter = lookupType(name).iterator(); iter.hasNext(); ) {
        TypeDecl d = (TypeDecl)iter.next();
        if(d.isStatic() || (d.enclosingType() != null && instanceOf(d.enclosingType()))) {
          c = c.add(d);
        }
      }
    }
    else
      c = lookupType(name);
    if(!c.isEmpty())
      return c;
    return topLevelType().lookupType(name); // Fix to search imports
    // include type parameters if not static
  }

  refine TypeConversion
  eq ReferenceType.narrowingConversionTo(TypeDecl type) {
    if(type.instanceOf(this))
      return true;
    if(isClassDecl() && !getModifiers().isFinal() && type.isInterfaceDecl())
      return true;
    if(isInterfaceDecl() && type.isClassDecl() && !type.getModifiers().isFinal())
      return true;
    if(isInterfaceDecl() && type.instanceOf(this))
      return true;

    if((this instanceof RequiredType) && type.instanceOf(this))
      return true;

    if(fullName().equals("java.lang.Object") && type.isInterfaceDecl())
      return true;
    // Dragons
    // TODO: Check if both are interfaces with compatible methods
    if(isArrayDecl() && type.isArrayDecl() && elementType().instanceOf(type.elementType()))
      return true;
    return false;
  }


   eq RequiredType.supertypeRawClassDecl(RawClassDecl type) = supertypeParClassDecl( type );
   eq RequiredType.supertypeRawInterfaceDecl(RawInterfaceDecl type) = supertypeParInterfaceDecl( type );
   eq RequiredType.supertypeTypeVariable(TypeVariable type) {
    for(int i = 0; i < type.getNumTypeBound(); i++)
      if(type.getTypeBound(i).type().subtype(this))
        return true;
    return false;
   }
   eq RequiredType.supertypeArrayDecl(ArrayDecl type) = false;

   eq RequiredType.supertypeClassDecl(ClassDecl type) {
        // does the class extend this RT as a class?
        // does the class implement this RT as an interface?

        for( Access a : type.getImplementsList() ) {
            TypeDecl td = Util.declarationFromTypeAccess( a );
            if( td.instanceOf( this ) ) {
                return true;
            }
        }

        if( type.hasSuperclass() && type.superclass() != null ) {
            if( type.superclass().subtype( this ) ) {
                return true;
            }
        }   
        
        return false;
   }

   eq RequiredType.supertypeInterfaceDecl(InterfaceDecl type) {
        System.out.println ( "@@@ RED FLAG , not fixed" );
        for( Access a : getImplementsList() ) {
            TypeDecl td = Util.declarationFromTypeAccess( a );
            if( td.instanceOf( type ) ) {
                return true;
            }
        }
        return getDirectSupertype().instanceOf( type );
   }

        /* TODO END */

   eq RequiredType.supertypeGenericClassDecl(GenericClassDecl type) {
        return supertypeClassDecl( type );
   }

   eq RequiredType.supertypeParClassDecl(ParClassDecl type) {
        TypeDecl td = type.genericDecl();
        boolean rv = td.subtype( this );
        return rv;
   }
   eq RequiredType.supertypeParInterfaceDecl(ParInterfaceDecl type) {
        return type.genericDecl().subtype( this );
   }

   boolean TypeDecl.isRequiredType() {
    return this instanceof RequiredType;
   }
/*
   boolean FieldDeclaration.isInstanceVariable() {
    return (hostType().isClassDecl() || hostType().isRequiredType() || hostType().isAnonymous()) && !isStatic();
   }
*/

  refine NameCheck
  public void VarAccess.nameCheck() {
    if(decls().isEmpty() && (!isQualified() || !qualifier().type().isUnknown() || qualifier().isPackageAccess()))
      error("no field named " + name());
    if(decls().size() > 1) {
      StringBuffer s = new StringBuffer();
      s.append("several fields named " + name());
      for(Iterator iter = decls().iterator(); iter.hasNext(); ) {
        Variable v = (Variable)iter.next();
        s.append("\n    " + v.type().typeName() + "." + v.name() + " declared in " + v.hostType().typeName());
      }
      error(s.toString());
    }
      
    // 8.8.5.1
    if(inExplicitConstructorInvocation() && !isQualified() && decl().isInstanceVariable() && hostType() == decl().hostType())
      error("instance variable " + name() + " may not be accessed in an explicit constructor invocation");

    Variable v = decl();
    if(!v.isFinal() && !v.isClassVariable() && (!v.hostType().isRequiredType()) && !v.isInstanceVariable() && v.hostType() != hostType())
      error("A parameter/variable used but not declared in an inner class must be declared final");

    // 8.3.2.3
    if((decl().isInstanceVariable() || decl().isClassVariable()) && !isQualified()) {
      if(hostType() != null && !hostType().declaredBeforeUse(decl(), this)) {
        if(inSameInitializer() && !simpleAssignment() && inDeclaringClass()) {
          BodyDecl b = closestBodyDecl(hostType());
          error("variable " + decl().name() + " is used in " + b + " before it is declared");
        }
      }
    }

  }


}
