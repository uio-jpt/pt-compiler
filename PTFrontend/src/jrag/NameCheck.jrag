import com.google.common.collect.Sets;

aspect NameCheck {

    /** Checks that instantiation refers to actual template */
    public void PTInstDecl.nameCheck() {
        if (getTemplate() == null)
            error("PTTemplate " + getID() + " not found in compilation unit.\n");
    }

    public void PTDecl.nameCheck() {
        super.nameCheck();
        Set<String> instantiatiorChain = getInstantiatorChain();
        if (instantiatiorChain.contains(getID())) {
            error("has a circular instantiation chain.\n");
        }
        
        if (lookupPTDecl(getID()) != this)
            error("Template or Package with name " + getID() + " is multiply declared in compilation unit.\n");
    }

    public void TemplateConstructorAccess.nameCheck() {
        super.nameCheck();
        if (getConstructorDecl() == null && getParentClass(PackageConstructor.class) == null)
            error("A merged constructor may only be called from a constructor.\n");
    }


    syn Set<String> PTDecl.getInstantiatorChain() circular [new HashSet<String>()] {
        Set<String> result = new HashSet<String>();
        for (PTInstDecl instDecl : getPTInstDecls()) {
            result.add(instDecl.getID());
            PTTemplate template = instDecl.getTemplate();
            if (template != null)
                result.addAll(template.getInstantiatorChain());
        }
        return result;
    }

}
