aspect NameCheck {

    /** Checks that instantiation refers to actual template */
    public void PTInstDecl.nameCheck() {
        if (getTemplate() == null)
            error("PTTemplate " + getID() + " not found in compilation unit.\n");
    }

    public void PTDecl.nameCheck() {
        if (lookupPTDecl(getID()) != this)
            error("Template or Package with name " + getID() + " is multiply declared in compilation unit.\n");
    }

    public void ConstructorDecl.callsMergedConstructorsCheck() {
        HashSet<String> mustBeCalled = getMergedClassesWithConstructors();
        HashSet<String> actuallyCalled = getMergedSuperCallNames();
        HashSet<String> missing = new HashSet<String>(mustBeCalled);
        missing.removeAll(actuallyCalled);
        for (String name : missing) {
            error("Missing merged constructor call to mergee class: " + name + "\n");
        }
    }

    public void PTMergedConstructorAccess.isCalledFromConstructor() {
        if (getConstructorDecl() == null)
            error("A merged constructor may only be called from a constructor.\n");
    }

    public void PTMergedMethodAccess.isCalledFromOverridingMethod() {
        String methodName;
        String errorMsg = "A merged method may only be called from its overriding method.\n";
        MethodDecl methodDecl = ((MethodDecl)getParentClass(MethodDecl.class));
        if (methodDecl == null)
            error(errorMsg + "\n");

        methodName = methodDecl.getID();
        if (!methodName.equals(getID())) 
            error(errorMsg + "\n");
    }

    public void PTMergedMethodAccess.collectErrors() {
        super.collectErrors();
        isCalledFromOverridingMethod();
    }
    
    public void PTMergedConstructorAccess.collectErrors() {
        super.collectErrors();
        isCalledFromConstructor();
    }    
    public void ConstructorDecl.collectErrors() {
        super.collectErrors();
        callsMergedConstructorsCheck();
    }

    public void PTDecl.collectErrors() {
        super.collectErrors();
        noCircularInstantiation();
    }

    public void PTDecl.noCircularInstantiation() {
        HashSet<String> instantiatiorChain = getInstantiatorChain();
        if (instantiatiorChain.contains(getID())) {
            error("has a circular instantiation chain.\n");
        }
    }

    syn HashSet<String> PTDecl.getInstantiatorChain() circular [new HashSet<String>()] {
        HashSet<String> result = new HashSet<String>();
        for (PTInstDecl instDecl : getPTInstDecls()) {
            result.add(instDecl.getID());
            PTTemplate template = instDecl.getTemplate();
            if (template != null)
                result.addAll(template.getInstantiatorChain());
        }
        return result;
    }

}
