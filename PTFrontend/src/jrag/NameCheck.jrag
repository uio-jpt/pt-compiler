import com.google.common.collect.Sets;

aspect NameCheck {

    /** Checks that instantiation refers to actual template */
    public void PTInstDecl.nameCheck() {
        if (getTemplate() == null)
            error("PTTemplate " + getID() + " not found in compilation unit.\n");
    }

    public void PTDecl.nameCheck() {
        super.nameCheck();
        Set<String> instantiatiorChain = getInstantiatorChain();
        if (instantiatiorChain.contains(getID())) {
            error("has a circular instantiation chain.\n");
        }
        
        if (lookupPTDecl(getID()) != this)
            error("Template or Package with name " + getID() + " is multiply declared in compilation unit.\n");
    }

    syn Set<String> PTDecl.getInstantiatorChain() circular [new HashSet<String>()] {
        Set<String> result = new HashSet<String>();
        for (PTInstDecl instDecl : getPTInstDecls()) {
            result.add(instDecl.getID());
            PTTemplate template = instDecl.getTemplate();
            if (template != null)
                result.addAll(template.getInstantiatorChain());
        }
        return result;
    }
    
    public void TabstractMethodDecl.nameCheck() {
    // 8.4
    // 8.4.2
        /*
    if(!hostType().methodsSignature(signature()).contains(this))
      error("test method with signature " + signature() + " is multiply declared in type " + hostType().typeName());
        */

    /**
     *  tabstract is a special abstract
     */
    // 8.4.3.4
    //    if(isNative() && hasBlock())
    //      error("native methods must have an empty semicolon body");
    // 8.4.5
    //    if(isAbstract() && hasBlock())
    //      error("abstract methods must have an empty semicolon body");
    // 8.4.5
    //    if(!hasBlock() && !(isNative() || isAbstract()))
    //      error("only abstract and native methods may have an empty semicolon body");
  }
}
