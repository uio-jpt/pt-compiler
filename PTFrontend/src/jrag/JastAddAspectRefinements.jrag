import com.google.common.collect.*;
import javaworld.Util;
aspect JastAddAspectRefinements {

    syn String ClassDecl.getSuperClassName() {
        if (hasSuperClassAccess()) {
            if (TypeAccess.class.isInstance(getSuperClassAccess())) {
                TypeAccess ta = (TypeAccess) getSuperClassAccess();
                return ta.getID();
            }
        }
        return null;
    }

    syn LinkedList<ConstructorDecl> ClassDecl.getConstructorDeclList() {
        LinkedList<ConstructorDecl> constructors = new LinkedList<ConstructorDecl>();
        for (BodyDecl decl : getBodyDeclList()) 
            if (decl instanceof ConstructorDecl)
                constructors.add((ConstructorDecl)decl);
        return constructors;
    }

    syn Set<String> ClassDecl.methodSignatures() {
        Set<String> signatures = localMethodsSignatureMap().keySet();
        return ImmutableSet.copyOf(signatures);
    }

    syn Set<String> ClassDecl.fieldNames() {
        Set<String> names = localFieldsMap().keySet();
        return ImmutableSet.copyOf(names);
    }

    syn Set<String> ClassDecl.methodNames() {
        Set<String> methodNames = Sets.newHashSet();
        for (String methodSignature : methodSignatures()) {
            String name = Util.getName(methodSignature);
            methodNames.add(name);
        }
        return methodNames;
    }

    syn Set<String> ClassDecl.getDefinitionSignatures() {
        return ImmutableSet.copyOf(Iterables.concat(methodSignatures(),fieldNames()));
    }

  // signature -> method declaration
    refine MemberMethods eq TypeDecl.localMethodsSignatureMap() {
    HashMap map = new HashMap(getNumBodyDecl());
    for(int i = 0; i < getNumBodyDecl(); i++) {
        if(getBodyDecl(i) instanceof MethodDecl && !(getBodyDecl(i) instanceof TabstractMethodDecl)) {
        MethodDecl decl = (MethodDecl)getBodyDecl(i);
        map.put(decl.signature(), decl);
      }
    }
    return map;
  }
    
}
