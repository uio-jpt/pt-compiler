import testutils.utils.CriticalPTException;

aspect ErrorCheck {

    /* what does this do? */
  // public void ClassInstanceExpr.collectErrors() {
  //     // skipping namecheck for templates
  //     //    nameCheck();
  //   typeCheck();
  //   accessControl();
  //   exceptionHandling();
  //   checkUnreachableStmt();
  //   definiteAssignment();
  //   checkModifiers();
  //   for(int i = 0; i < getNumChild(); i++) {
  //     getChild(i).collectErrors();
  //   }
  // }


/* // disabled sep 30, going back to backwards E
    public void TemplateConstructor.typeCheck() {
        super.typeCheck();
        if (getNumParameter() > 0) {
            error("Template Constructors aren't allowed to have parameters.");
        }
    }
*/

    refine Generics public void TypeDecl.typeCheck() {
        Generics.TypeDecl.typeCheck();

        PTDecl enclosingPTDecl = (PTDecl) getParentClass( PTDecl.class );
        TypeDecl enclosingType = (TypeDecl) getParentClass( TypeDecl.class );
        MethodDecl enclosingMethod = (MethodDecl) getParentClass( MethodDecl.class );
        
        if( enclosingPTDecl != null ) {
            boolean isLocalToMethod = (enclosingMethod != null) && (enclosingMethod.getParentClass( TypeDecl.class ) == enclosingType); 
            if( !isLocalToMethod ) {
                boolean isLocalToType = enclosingType != null;
                if( isLocalToType ) {
                    error( "implementation restriction -- nested classes (" + getID() + " nested in " + enclosingType.getID() + ") are disallowed in JPT" );
                }
            }
        }
    }

    refine TypeCheck public void  ClassInstanceExpr.typeCheck() {
        // duplicated below to allow for inst rt : // TypeCheck.ClassInstanceExpr.typeCheck();

        if(isQualified() && qualifier().isTypeAccess() && !qualifier().type().isUnknown())
          error("*** The expression in a qualified class instance expr must not be a type name");
        // 15.9
        if(isQualified() && !type().isInnerClass() && !((ClassDecl)type()).superclass().isInnerClass() && !type().isUnknown()) {
          error("*** Qualified class instance creation can only instantiate inner classes and their anonymous subclasses" );
        }
        if(!type().isClassDecl() && !(type() instanceof RequiredClass)) {
          error("*** Can only instantiate classes, which " + type().typeName() + " is not");
        }
        typeCheckEnclosingInstance();
        typeCheckAnonymousSuperclassEnclosingInstance();



        // check that expr is not a template class if new expr is made
        // from within a template class and its list of arguments is
        // greater than 1.
        if ( getNumArg() > 0 && getParentClass(PTTemplate.class) != null) {
            Access a = getAccess();
            if( a instanceof TypeAccess ) {
                TypeAccess t = (TypeAccess) a;
                if (!localLookupType(t.getID()).isEmpty()) { 
                // TODO make this check only for new TemplateClass calls.
                // example, new LinkedList(oldLinkedList); should work.
                error("New calls in templates only allowed without arguments.");
                }
            } else if( a instanceof ParTypeAccess ) {
                // TODO make equivalent errorcheck here
            }
        }
    }

    refine ErrorCheck public void ASTNode.collectErrors() {
        try{
            ErrorCheck.ASTNode.collectErrors();
        } catch (CriticalPTException e) {
            
        }
    }

    public void TabstractMethodDecl.typeCheck() {
        if (getParentClass(PTPackage.class) != null) {
            if(hostType().methodsSignature(signature()) == SimpleSet.emptySet) {
                error("Tabstract method must be implemented before or in the instantiating package class.");
            }
        }
    }

    public void TemplateClassIdentifier.collectErrors() {
        super.collectErrors();

        PTDecl parentPt = (PTDecl) getParentClass( PTDecl.class );
        Set<ASTNode> rvs = locateTemplateClass( parentPt );

        if( rvs.size() == 0 ) {
            error( "template type identifier cannot be resolved" );
        } else if( rvs.size() > 1 ) {
            error( "template type identifier is ambiguous" );
        }
    }

    public void SuperConstructorAccess.collectErrors() {
        super.collectErrors();
        PTTemplate parentTemplate = (PTTemplate) getParentClass( PTTemplate.class );
        EnumDecl parentEnum = (EnumDecl) getParentClass( EnumDecl.class );
        if( parentEnum != null ) {
            /* Exception for enums: these generate a class implicity, and in the code for
               this call a superconstructor java.lang.Enum(String,int).

               Being able to do this from templates seems like the only sensible choice?
               */
            return;
        }
        if( parentTemplate != null ) {
            error( "calling super-constructor in template class (should be called from instantiating package)" );
        }
    }

    protected boolean PTConstructorDecl.tsupersWereExpanded = false;

    // why is this in errorcheck? TODO code reorg
    rewrite PTConstructorDecl {
            when (this.tsupersWereExpanded == false)
            to PTConstructorDecl {
                PTDecl parentPt = (PTDecl) getParentClass( PTDecl.class );
//                java.util.List<ASTNode> tparents = parentPt.getTemplateDeclarationsMergedTo( getClassDecl().getID() );
                java.util.Map<String, PTTemplate> templatesMap = parentPt.getInstantiatedTemplatesMap();
                java.util.Map<PTInstDecl,ASTNode> uncalled = new java.util.LinkedHashMap<PTInstDecl,ASTNode>();

                // System.out.println( "rewriting PTConstructorDecl in " + getID() );

                boolean requiredTypesAsTParents = false;

                for( PTInstDecl ptid : parentPt.getPTInstDecls() ) {
                    for( PTInstTuple ptit : ptid.getPTInstTuples() ) {
                        if( ptit.getID().equals( getClassDecl().getID() ) ) {
                            SimpleSet tparents = ptid.getTemplate().lookupTypeInPTDecl( ptit.getOrgID() );
                            if( tparents.size() != 1 ) {
                                error( "lookup of " + ptit.getOrgID() + " in template failed unexpectedly (returned " + tparents.size() + " result(s))" );
                            }

                            ASTNode tparent = (ASTNode) tparents.iterator().next();

                            if( tparent instanceof RequiredType ) {
                                requiredTypesAsTParents = true;
                            } else {
                                uncalled.put( ptid, tparent );
                            }
                        }
                    }
                }

                assert( !requiredTypesAsTParents || uncalled.isEmpty() );

                for( PTTSuperConstructorCall scc : getTSuperConstructorInvocationList() ) {
                    Set<PTInstDecl> instDecls = scc.getTemplateClassIdentifier().locateInstantiation( parentPt );
                    if( instDecls.size() == 1 ) {
                        PTInstDecl decl = instDecls.iterator().next();
                        uncalled.remove( decl );
                    }
                }


                for( PTInstDecl ptid : uncalled.keySet() ) {
                    // System.out.println( "SHOULD NOW BE ADDING STUFF " );

                    ASTNode node = uncalled.get( ptid );
                    ClassDecl cd = (ClassDecl) node;
                    PTTemplate template = (PTTemplate) node.getParentClass( PTTemplate.class );

                    // System.out.println( "uncalled class is " + node.dumpTree() );

                    boolean hasZeroArityConstructor = false;
                    for( ConstructorDecl consd : cd.getConstructorDeclList() ) {
                        // System.out.println( "constructor with arity " + consd.arity() );
                        if( consd.arity() > 0 ) continue;
                        hasZeroArityConstructor = true;
                    }
                    // System.out.println( "end enumeration of constructors" );

                    if( hasZeroArityConstructor ) {
                        TemplateClassIdentifier tci = TemplateClassIdentifier.extractFrom( ptid, cd.getID() );
                        // new TemplateClassIdentifier( "", template.getID(), cd.getID(), "" );
                        PTTSuperConstructorCall myCall = new PTTSuperConstructorCall( tci , new AST.List() );

                        // System.out.println( "adding one call: " + myCall.dumpTree() );

                        // added in arbitrary order!
                        addTSuperConstructorInvocation( myCall );
                    }
                }

                this.tsupersWereExpanded = true;
                return this;
            }
    }

    refine NameCheck public void ParameterDeclaration.nameCheck() {
        if( getParentClass( PTConstructorPromise.class ) != null ) {
            return;
        } else {
            NameCheck.ParameterDeclaration.nameCheck();
        }
    }

    boolean TypeDecl.promisesConstructor( ClassInstanceExpr expr ) {
        return false;
    }

    boolean RequiredType.promisesConstructor( ClassInstanceExpr expr ) {
        boolean foundGood = false;
        for( BodyDecl bd : getBodyDeclList() ) {
            if( !(bd instanceof PTAbstractConstructor ) ) continue;
            PTAbstractConstructor ptac = (PTAbstractConstructor) bd;
            if( ptac.matchesConstructorInvocation( expr ) ) {
                foundGood = true;
            }
        }
        return foundGood;
    }

    boolean ClassDecl.promisesConstructor( ClassInstanceExpr expr ) {
        boolean foundGood = false;
        for( PTConstructorPromise promise : promisedConstructors() ) {
            if( promise.matchesConstructorInvocation( expr ) ) {
                foundGood = true;
            }
        }
        return foundGood;
    }

    boolean ParClassDecl.promisesConstructor( ClassInstanceExpr expr ) {
        // this is inspired by ParClassDecl.getImplementsList()
        // pretty sure it's the "right" way
        // (and also that all casts are justified)
        // note the way .substitute() is used on a LIST
        // this list must consist of all access nodes
        // (this is nondestructive, like a mapcar)

        boolean foundGood = false;

        GenericClassDecl generic = (GenericClassDecl) genericDecl();
        for( PTConstructorPromise promise : generic.promisedConstructors() ) {
            if( promise.matchesConstructorInvocationSubstituted( expr, this ) ) {
                foundGood = true;
            }
        }

        return foundGood;
    }

    refine Enums public void ClassInstanceExpr.nameCheck() {
        boolean doNormalChecking = true;

        PTTemplate template = (PTTemplate) getParentClass( PTTemplate.class );
        EnumDecl parentEnum = (EnumDecl) getParentClass( EnumDecl.class );

        if( template != null && parentEnum == null ) {
            TypeDecl t = Util.declarationFromTypeAccess( getAccess() );
            MethodDecl parentMethod = (MethodDecl) t.getParentClass( MethodDecl.class );
            boolean isLocalClass = parentMethod != null;

            if( !isLocalClass && t.getParentClass( PTTemplate.class ) == template ) {
                doNormalChecking = false;

                if( !t.promisesConstructor(this) ) {
                  String errorMessage = String.format( "illegal \"new %s(...)\" in template (no such constructor assumed)", t.fullName() );
                  error( errorMessage );
                }
            }

        }

        if( doNormalChecking ) {
            Enums.TypeDecl.nameCheck();
        }
    }

    public void PTTSuperConstructorCall.collectErrors() {
        /* I believe not calling super.collectErrors() here is actually NOT a hack,
           or at least not a very bad one. This class essentially "embeds" a Java
           statement. If it can be resolved into a statement, that statement is
           copied into the AST and checked normally. If it cannot be resolved into
           a statement, we give an error (the lines directly below).
           
           Not calling conventional error checking here merely means that normal
           checking is not done UNLESS we can resolve this into a constructor call,
           e.g.:
            tsuper[TSuperClassThatDoesNotExist]( FieldThatDoesNotExist );
           will only give one error, and changing it to
            tsuper[TSuperClassThatExists]( FieldThatDoesNotExist );
           will reveal a new one.
        */
        Set<PTInstDecl> node = getTemplateClassIdentifier().locateInstantiation( (PTDecl) getParentClass( PTDecl.class ) );
        if( node.size() < 1 ) {
            error( "no instantiation found matching tsuper constructor specification " + getTemplateClassIdentifier() );
        } else if( node.size() > 1 ) {
            error( "ambiguous tsuper constructor specification " + getTemplateClassIdentifier() );
        }
    }

    public void PTConstructorDecl.checkTSuperConstructorInvocations() {
        PTDecl parentPt = (PTDecl) getParentClass( PTDecl.class );

        boolean hasDelegatedToThis = false;

        if( hasConstructorInvocation() ) {
            Stmt invoc = getConstructorInvocation();
            if( invoc instanceof ExprStmt ) {
                ExprStmt einvoc = (ExprStmt) invoc;
                Expr expr = einvoc.getExpr();
                if( expr instanceof ConstructorAccess ) {
                    ConstructorAccess cacc = (ConstructorAccess) expr;

                    if( cacc.getID().equals( "this" ) ) {
                        hasDelegatedToThis = true;
                    }
                }
            }
        }

        if( hasDelegatedToThis ) {
            if( getNumTSuperConstructorInvocation() > 0 ) {
                error( "constructor contains both call to this() and tsuper constructor invocation(s)" );
            }
            return;
        }

        if( parentPt != null ) {
            java.util.Map<PTInstDecl,ASTNode> uncalled = new java.util.LinkedHashMap<PTInstDecl,ASTNode>();
            java.util.Set<String> called = new java.util.LinkedHashSet<String>();

            for( PTInstDecl ptid : parentPt.getPTInstDecls() ) {
                for( PTInstTuple ptit : ptid.getPTInstTuples() ) {
                    if( ptit.getID().equals( getClassDecl().getID() ) ) {
                        SimpleSet tparents = ptid.getTemplate().lookupTypeInPTDecl( ptit.getOrgID() );
                        if( tparents.size() != 1 ) {
                            error( "lookup of " + ptit.getOrgID() + " in template failed unexpectedly (returned " + tparents.size() + " result(s))" );
                        }

                        ASTNode tparent = (ASTNode) tparents.iterator().next();

                        if( tparent instanceof RequiredType ) {
                            ;
                        } else {
                            uncalled.put( ptid, tparent );
                        }
                    }
                }
            }


            java.util.Map<String, PTTemplate> templatesMap = parentPt.getInstantiatedTemplatesMap();

            for( PTTSuperConstructorCall scc : getTSuperConstructorInvocationList() ) {
                Set<PTInstDecl> instDecls = scc.getTemplateClassIdentifier().locateInstantiation( parentPt );
                if( instDecls.size() == 1 ) {
                    PTInstDecl decl = (PTInstDecl) instDecls.iterator().next();

                    uncalled.remove( decl );

		    if (!called.add(scc.getTemplateClassIdentifier().toString()))
                        scc.error( "tsuper-constructor called twice" );

                    // TODO check that there's a constructor with matching parameters
                    // not urgent, because this leads to an error message
                    // involving minit$ methods later already
                }
            }
            
            for( PTInstDecl ptid : uncalled.keySet()) {
                error( "tsuper constructor not called" ); // TODO better message
            }
        }
    }

    public void ClassDecl.collectErrors() {
        super.collectErrors();

        checkConstructorPromises();
    }

    public void PTConstructorDecl.collectErrors() {
        super.collectErrors();

        boolean isConstructorInEnum = getParentClass( EnumDecl.class ) != null;
        boolean hasPTDeclParent = getParentClass( PTDecl.class ) != null;
        boolean hasMethodParent = getParentClass( MethodDecl.class ) != null;

        boolean isInPTClass = hasPTDeclParent && !(hasMethodParent || isConstructorInEnum); // XX make more precise

        if( isInPTClass ) {
            checkTSuperConstructorInvocations();
        }
    }

    public void PTInstDecl.collectErrors() {
        super.collectErrors();

        java.util.HashSet<String> mappedTo = new java.util.LinkedHashSet<String>();

        for( PTInstTuple instTuples : getPTInstTuples() ) {
            mappedTo.add(instTuples.getID());
        }
    }
}
