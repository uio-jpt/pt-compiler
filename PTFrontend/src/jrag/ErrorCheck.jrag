aspect ErrorCheck {

    /* what does this do? */
  // public void ClassInstanceExpr.collectErrors() {
  //     // skipping namecheck for templates
  //     //    nameCheck();
  //   typeCheck();
  //   accessControl();
  //   exceptionHandling();
  //   checkUnreachableStmt();
  //   definiteAssignment();
  //   checkModifiers();
  //   for(int i = 0; i < getNumChild(); i++) {
  //     getChild(i).collectErrors();
  //   }
  // }

    public void TemplateConstructor.typeCheck() {
        super.typeCheck();
        if (getNumParameter() > 0) {
            error("Template Constructor aren't allowed to have parameters.");
        }
    }

    refine TypeCheck public void  ClassInstanceExpr.typeCheck() {
        TypeCheck.ClassInstanceExpr.typeCheck();
        // check that expr is not a template class if new expr is made
        // from within a template class and its list of arguments is
        // greater than 1.
        if ( getNumArg() > 0 && getParentClass(PTTemplate.class) != null) {
			TypeAccess t = (TypeAccess) getAccess();
        	if (!localLookupType(t.getID()).isEmpty()) { 
            // TODO make this check only for new TemplateClass calls.
            // example, new LinkedList(oldLinkedList); should work.
            error("New calls in templates only allowed without arguments.");
        	}
        }
    }
}
