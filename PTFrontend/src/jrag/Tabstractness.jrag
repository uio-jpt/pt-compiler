import com.google.common.collect.Sets;

import java.util.Set;
import java.util.HashSet;

import AST.SimpleSet;

/* This file contains as much as possible of everything in
   JastAdd code that is related to tabstractness, including
   the methods required for the modifiers, and error checking.

   Things related to tabstractness that I haven't been able
   to cram into this file:
     - (ugliest part) in InstantiationRewrite.jadd, when
       rewriting PTClassAddsDecl -> PTClassDecl, we _manually_
       transfer all the tabstract-method signatures to
       the new class.
     - there is code in javaworld for transferring
       tabstract-method signatures over to adds-classes when
       merging.

  The error-checking phase begins with collectErrors(), which
  is hooked below (note that when doing something like this,
  we need to pass on a call to super.collectErrors() -- which
  mostly calls collectErrors on subnodes -- otherwise we're
  overriding all the error checking to only check for this _one_
  type of error.)
*/

aspect Tabstractness {
    syn lazy boolean Modifiers.isTabstract() {
        return numModifier("tabstract") != 0;
    }
    syn boolean TypeDecl.isTabstract() {
        return getModifiers().isTabstract();
    }
    syn boolean MethodDecl.isTabstract() {
        return getModifiers().isTabstract();
    }

    // todo refine checkModifiers to identify new illegal modifier combos

    refine NameCheck public void MethodDecl.nameCheck() {
        /* We need to account for tabstract-ness. This is simply a copy of
           NameCheck.MethodDecl.nameCheck where this is done.
         */

        // 8.4
        // 8.4.2
        if( !isTabstract() ) { // ??xxx todo check conditional appropriate
            if(!hostType().methodsSignature(signature()).contains(this))
              error("method with signature " + signature() + " is multiply declared in type " + hostType().typeName());
        }

        // 8.4.3.4
        if(isNative() && hasBlock())
          error("native methods must have an empty semicolon body");
        // 8.4.5
        if(isAbstract() && hasBlock())
          error("abstract methods must have an empty semicolon body");

        if(isTabstract() && hasBlock())
          error("abstract methods must have an empty semicolon body");

        // 8.4.5
        if(!hasBlock() && !(isNative() || isAbstract() || isTabstract())) {

            System.out.println( this + " " + getClass().getName() );
          error("only abstract, native or tabstract methods may have an empty semicolon body");
        }
    }

    // below more at home in a jadd file? the distinction seems subtle
    // could we hook into the constructor? that would make this cleaner

    private HashSet<String> SimpleClass.tabstractSignatures = null;

    public HashSet<String> SimpleClass.getTabstractSignatures() {
        if( tabstractSignatures == null ) {
            tabstractSignatures = new HashSet<String> ();
        }
        return tabstractSignatures;
    }

    public void SimpleClass.addTabstractSignature( String sig ) {
        getTabstractSignatures().add( sig );
    }

    public void SimpleClass.checkTabstractsInstantiated() {
        for( String sig : getTabstractSignatures() ) {
            if( getClassDecl().hostType().methodsSignature( sig ) == SimpleSet.emptySet ) {
                error( "tabstract with signature " + sig + " was never instantiated" );
            }
        }
    }

    public void PTPackage.checkTabstractsInstantiated() {
        for( SimpleClass sc : getSimpleClassList() ) {
            sc.checkTabstractsInstantiated();
        }
    }

    public void PTPackage.collectErrors() {
        checkTabstractsInstantiated();

        super.collectErrors();
    }
}
