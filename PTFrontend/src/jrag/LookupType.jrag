/* This might be worth going over with git blame to check
 * everything added with this commit, as at this point I'm
 * really not even sure about the JastAdd syntax used here.
 * Pretty much all I've added with this commit to this file
 * is cargo cult code, should be checked. -svk */

/* Note to self and others on the mysterious-looking syntax:

   eq A.getB(int j).C() {
       ...
   }

   This is explained here:
   http://jastadd.org/jastadd-reference-manual/attributes
   under "broadcasting inherited attributes".

   This is an equation specifying C for each B in a list.
   However, the context (where ... executes) is NOT that of
   B, but instead that of A, with additionally j bound to
   the index of the B in the list. So "this" refers to _A_,
   not a B, and the specific B you're most likely looking for
   can be found by doing "getB(j)" within the context.
*/

aspect LookupType {

    inh TypeDecl PTDecl.lookupType(String packageName, String typeName);
    eq PTCompilationUnit.getPTDecl(int i).lookupType(String packageName, String typeName) {
            /* Beware: it seems tempting to do something like the following here:
               if( packageName.equals( "" ) ) {
                    TypeDecl td = getPTDecl(i).lookupType( typeName );
               }
               This would, seemingly, return the right RESULT (the name of the enum
               when needed).

               However, this breaks absolutely everything else, even if you don't do
               anything further in response to this information. This seems
               impossible, but is likely due to 'lazy' attributes (lookupType is
               one) -- they cache the first value calculated. Unluckily, these
               are Java functions that depend on their environment, so by caching
               like this we are asserting that nothing further will change.
               Evidently, a call to PTDecl.lookupType() here is simply too early.

               (???) .flushCaches doesn't help. Mysterious..?
            */
        return lookupType(packageName, typeName);
    }

    eq PTDecl.getSimpleClass(int i).lookupType(String packageName, String typeName) {
        String fullName = packageName.equals("") ? typeName : packageName + "." + typeName;
        for (SimpleClass cls : getSimpleClassList()) {
            TypeDecl type = cls.getClassDecl();
            if (type.fullName().equals(fullName)) {
                return type;
            }
        }
        return lookupType(packageName, typeName);
    }

    eq PTDecl.getPTEnumDecl(int i).lookupType(String packageName, String typeName) {
        String fullName = packageName.equals("") ? typeName : packageName + "." + typeName;
        for (PTEnumDecl cls : getPTEnumDeclList()) {
            if (cls.fullName().equals(fullName)) {
                return cls;
            }
        }
        return lookupType(packageName, typeName);
    }

    eq PTDecl.getPTInterfaceDecl(int i).lookupType(String packageName, String typeName) {
        String fullName = packageName.equals("") ? typeName : packageName + "." + typeName;
        for (PTInterfaceDecl cls : getPTInterfaceDeclList()) {
            if (cls.fullName().equals(fullName)) {
                return cls;
            }
        }
        return lookupType(packageName, typeName);
    }

    syn TypeDecl PTDecl.lookupType(String name) {
        for (TypeDecl cls: getClassList()) {
            if (cls.getID().equals(name)) {
                return cls;
            }
        }
        for (PTEnumDecl cls : getPTEnumDeclList()) {
            if (cls.getID().equals(name)) {
                return cls;
            }
        }
        for (PTInterfaceDecl cls : getPTInterfaceDeclList()) {
            if (cls.getID().equals(name)) {
                return cls;
            }
        }
        return null;
    }

    syn TypeDecl PTInstTuple.getOriginator() = (TypeDecl) getTemplate().lookupType(getOrgID());

    syn PTTemplate PTDecl.lookupTemplate(String name) = null;
    eq PTTemplate.lookupTemplate(String name) = name.equals(getID()) ? this : null;

    syn PTClassAddsDecl PTDecl.lookupAddClass(String name) {
        for (PTClassAddsDecl decl: getAdditionClassList()) {
            if (decl.getID().equals(name))
                return decl;
        }
        return null;
    }

    inh SimpleSet SimpleClass.lookupType(String name);

    eq PTTemplate.getTypeParameter().lookupType(String name) {
        System.out.println( "looking up type in template for type param: " + name );

        SimpleSet c = SimpleSet.emptySet;
        c = addTypeVariables(c, name);
        if(!c.isEmpty()) return c;

        for (SimpleClass s : getSimpleClassList()) {
            ClassDecl cd = s.getClassDecl();
            if (cd.getID().equals(name))
                return SimpleSet.emptySet.add(cd);
        }
        for (PTEnumDecl s : getPTEnumDeclList()) {
            if (s.getID().equals(name)) {
                return SimpleSet.emptySet.add(s);
            }
        }
        for (PTInterfaceDecl s : getPTInterfaceDeclList()) {
            if (s.getID().equals(name)) {
                return SimpleSet.emptySet.add(s);
            }
        }
        TypeDecl t = lookupType("", name);
        if (t!=null) return SimpleSet.emptySet.add(t);
    }

    eq PTDecl.getSimpleClass(int i).lookupType(String name) {
        System.out.println( "looking up type in decl: " + name );

        if( this instanceof PTTemplate ) {
            SimpleSet c = SimpleSet.emptySet;
            PTTemplate ptt = (PTTemplate) this;
            c = ptt.addTypeVariables(c, name);
            if(!c.isEmpty()) return c;
        }

        for (SimpleClass s : getSimpleClassList()) {
            ClassDecl cd = s.getClassDecl();
            if (cd.getID().equals(name))
                return SimpleSet.emptySet.add(cd);
        }
        for (PTEnumDecl s : getPTEnumDeclList()) {
            if (s.getID().equals(name)) {
                return SimpleSet.emptySet.add(s);
            }
        }
        for (PTInterfaceDecl s : getPTInterfaceDeclList()) {
            if (s.getID().equals(name)) {
                return SimpleSet.emptySet.add(s);
            }
        }
        TypeDecl t = lookupType("", name);
        if (t!=null) return SimpleSet.emptySet.add(t);

        System.out.println( "ending up returning null from decl");
    }

    inh ClassDecl TemplateMethodAccess.getClassDecl(String className);

    eq ASTNode.getChild(int i).getClassDecl(String className) {
    }
    eq PTCompilationUnit.getPTDecl(int j).getClassDecl(String className) {
        for (int i=0; i<getNumPTDecl(); i++) {
            if (j==i) continue;
            // System.out.println("*** Looking at " + getPTDecl(i) + "***");
            ClassDecl res = getPTDecl(i).getInnerClassDecl(className);
            if (res!=null) return res;
        }
        return null;
    }

    syn ClassDecl ASTNode.getInnerClassDecl(String className) {
        for (int i=0; i<getNumChild(); i++) {
            ClassDecl res = getChild(i).getInnerClassDecl(className);
            if (res!=null) return res;
        }
        return null;
    }

    eq ClassDecl.getInnerClassDecl(String className) = 
        getID().equals(className) ? this : null;

}
