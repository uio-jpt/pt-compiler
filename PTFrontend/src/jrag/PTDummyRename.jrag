/**
   This part might be rewritten.. maybe even put in javaworld.
   much of this signature stuff is done elsewhere.
 */

import com.google.common.base.Joiner;
import java.util.ArrayList;


aspect PTDummyRename {

    inh TypeDecl PTDummyRename.getOriginatorClass();
    eq PTInstTuple.getPTDummyRename(int i).getOriginatorClass() = getOriginator();
    
    eq PTMethodRename.getAccess(int i).lookupType(String name) {
        return getOriginatorClass().lookupType(name);
    }

    eq PTMethodRename.getAccess(int i).nameType() = NameType.TYPE_NAME;

    syn String PTDummyRename.getSignature();

    eq PTMethodRename.getSignature() = getOldSignature();

    eq PTMethodRenameAll.getSignature() = getOrgID() + "(*)";

    eq PTFieldRename.getSignature() = getOrgID();

    syn String MethodDecl.getPTEarlySignature() {
        java.util.List<String> args = new ArrayList<String> ();
        for( ParameterDeclaration d : getParameterList() ) {
            Access acc = d.getTypeAccess();
            String s;
            if( acc instanceof PrimitiveTypeAccess ) {
                s = acc.toString();
            } else {
                if( acc.type() instanceof UnknownType ) {
                    s = acc.toString();
                } else {
                    s = acc.type().fullName();
                }
            }
            args.add( s );
        }
        return getID() + "(" + Joiner.on( ", " ).join( args ) + ")";
    }

    syn String PTMethodRename.getCustomSignature(String name) {
        StringBuffer sig = new StringBuffer(name + "(" );
        Iterator<Access> iter = getAccessList().iterator();
        while (iter.hasNext()) {
            Access acc = iter.next();
            if( acc instanceof PrimitiveTypeAccess ) {
                sig.append( acc.toString() );
            } else {
                assert( acc instanceof TypeAccess ); 
                if( acc.type() instanceof UnknownType ) {
                    sig.append( acc.toString() );
                } else {
                    sig.append( acc.type().fullName() );
                }
            }
            if (iter.hasNext())
                sig.append(", ");
        }
        sig.append(")");
        return sig.toString();
    }

    syn String PTMethodRename.getOldSignature() = getCustomSignature(getOrgID());
    syn String PTMethodRename.getNewSignature() = getCustomSignature(getID());    


    // re-enabled. it looks like a string model might be viable, given
    // that there are methods from declarations to get all accesses

    public void PTMethodRename.nameCheck() {
        String needle = getSignature();
        boolean didFind = false;
        for( Object o : getOriginatorClass().methodsSignatureMap().values() ) {
            MethodDecl decl = (MethodDecl) o;
            // the normal signature tends to have types devolve into "Unknown" -- TODO not quite sure why types cannot be fully resolved
            String signature = decl.getPTEarlySignature();
            if( signature.equals( needle ) ) {
                didFind = true;
                break;
            }
        }
        if( !didFind ) {
//        if (!getOriginatorClass().methodsSignatureMap().containsKey(getSignature())) {
            error("Method with signature " + getSignature() + " not found in originating class " +
                  getOriginatorClass().getID() + ".\n");
        }
    }

    public void PTMethodRenameAll.nameCheck() {
        if (!getOriginatorClass().methodNames().contains(getOrgID())) {
            error("No method with name " + getOrgID() + " found in originating class " +
                  getOriginatorClass().getID() + ".\n");
        }
    }

    public void PTFieldRename.nameCheck() {
        if (!getOriginatorClass().memberFieldsMap().containsKey(getSignature())) {
            error("Field " + getSignature() + " not found in originating class " +
                  getOriginatorClass().getID() + ".\n");
        }
    }

    public void PTDummyRename.addSelfTo(Map<String,String> renameMap) {
        renameMap.put(getSignature(), getID());
    }

    public void PTMethodRename.addSelfTo(Map<String,String> renameMap) {
        renameMap.put(getOldSignature(), getNewSignature());
    }
    
    public void PTMethodRenameAll.addSelfTo(Map<String,String> renameMap) {
        String methodName = getOrgID();
        for (String originalSignature : getOriginatorClass().methodSignatures())
            if (originalSignature.startsWith(methodName))
                renameMap.put(originalSignature, getID());
    }
    

}
