aspect IntroduceExplicitCasts {
    public void ASTNode.introduceExplicitCasts() {
        for(int i = 0; i < getNumChild(); i++) {
            ASTNode child  = getChild(i);
            ASTNode replacement = child.introduceMethodAccessCasts();
            if( replacement != null ) {
                getChild(i).replaceSelfWith( replacement );
            }
            child = getChild(i);
            child.introduceExplicitCasts();
        }
    }

    public ASTNode ASTNode.introduceMethodAccessCasts() {
        return null;
    }

    public ASTNode MethodAccess.introduceMethodAccessCasts() {
        // is this an access to a method that is defined within this template?
        MethodDecl mdecl = decl();
        Iterator<ParameterDeclaration> paramDecl = mdecl.getParameterList().iterator();
        MethodAccess baseAccess = this;

        if( mdecl instanceof ParMethodDecl ) {
            ParMethodDecl pmdecl = (ParMethodDecl) mdecl;

            ParMethodAccess pma = new ParMethodAccess( getID(), getArgList().fullCopy(), pmdecl.getTypeArgumentList().fullCopy() );

            replaceSelfWith( pma );
            baseAccess = pma;
        }

        Iterator<Expr> argList = baseAccess.getArgList().iterator();

        while( paramDecl.hasNext() && argList.hasNext() ) {
            ParameterDeclaration pd = paramDecl.next();
            TypeDecl tpd = pd.type();
            Expr a = argList.next();
            TypeDecl ta = a.type();
            if( tpd instanceof RequiredType ) {
                // ignore required type
            } else if( tpd instanceof TypeVariable ) {
                // ignore type variables for now
            } else {
                System.out.println( "for method " + mdecl.name() + " introducing explicit cast to " + tpd.name() + " of type " + tpd.getClass().getName() );
                Expr ra = new CastExpr( new TypeAccess( tpd.packageName(), tpd.name() ), (Expr) a.fullCopy() );
                a.replaceSelfWith( ra );
            }
        }

        if( baseAccess != this ) {
            return baseAccess;
        }

        return null;
    }
    
}
