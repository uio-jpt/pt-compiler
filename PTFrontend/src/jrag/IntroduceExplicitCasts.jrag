aspect IntroduceExplicitCasts {
    public void ASTNode.introduceExplicitCasts() {
        for(int i = 0; i < getNumChild(); i++) {
            ASTNode child  = getChild(i);
            ASTNode replacement = child.introduceMethodAccessCasts();
            if( replacement != null ) {
                getChild(i).replaceSelfWith( replacement );
            }
            child = getChild(i);
            child.introduceExplicitCasts();
        }
    }

    public ASTNode ASTNode.introduceMethodAccessCasts() {
        return null;
    }

    public ASTNode MethodAccess.introduceMethodAccessCasts() {
        // is this an access to a method that is defined within this template?
        MethodDecl mdecl = decl();
        Iterator<ParameterDeclaration> paramDecl = mdecl.getParameterList().iterator();
        MethodAccess baseAccess = this;

        if( mdecl instanceof ParMethodDecl ) {
            ParMethodDecl pmdecl = (ParMethodDecl) mdecl;

            List<Access> typeArgs = new List<Access>();
            for( Access a : pmdecl.getTypeArgumentList() ) {
                TypeDecl erasedType = a.type().erasure();
                System.out.println( "ERASED TYPE ARG " + erasedType.createQualifiedAccess().dumpTree() );
                typeArgs = typeArgs.add( erasedType.createQualifiedAccess() );
            }

            ParMethodAccess pma = new ParMethodAccess( getID(), getArgList().fullCopy(), typeArgs );

            System.out.println( "PROPOSING TO REPLACE " + dumpTree() + " WITH " + pma.dumpTree() );

            replaceSelfWith( pma );
            baseAccess = pma;
        }

        Iterator<Expr> argList = baseAccess.getArgList().iterator();

        while( paramDecl.hasNext() && argList.hasNext() ) {
            ParameterDeclaration pd = paramDecl.next();
            Access tacc = (Access) pd.getTypeAccess();
            TypeDecl tpd = pd.type();
            Expr a = argList.next();
            TypeDecl ta = a.type();
            if( tacc instanceof ArrayTypeAccess ) {
                System.out.println( "for method " + mdecl.name() + " introducing explicit cast to array" );
                Expr ra = new CastExpr( (TypeAccess) tacc.fullCopy(), (Expr) a.fullCopy() );
                a.replaceSelfWith( ra );
            } else if( tpd instanceof RequiredType ) {
                // ignore required type
                System.out.println( "ignoring RT " + tpd.dumpTree() );
            } else if( tpd instanceof TypeVariable ) {
                // ignore type variables for now
                System.out.println( "ignoring TV " + tpd.dumpTree() );
            } else {
                System.out.println( "for method " + mdecl.name() + " introducing explicit cast to " + tpd.name() + " of type " + tpd.getClass().getName() );
                Expr ra = new CastExpr( new TypeAccess( tpd.packageName(), tpd.name() ), (Expr) a.fullCopy() );
                a.replaceSelfWith( ra );
            }
        }

        if( getID().equals( "graph_search" ) ) {
            System.out.println( "dumping result of graph_search: " + baseAccess.dumpTree() );
        }

        if( baseAccess != this ) {
            return baseAccess;
        }

        return null;
    }
    
}
